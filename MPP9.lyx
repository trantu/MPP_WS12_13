#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mikroprozessorpraktikum WS 12/13
\end_layout

\begin_layout Author
Carlos Martín Nieto, Simon Hohberg, Tu Tran
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{section}{8}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Der Digital/Analog Wandler des MSP430F1612
\end_layout

\begin_layout Subsection
Sinusgenerator
\end_layout

\begin_layout Subsubsection
Entwickeln Sie das Grundgerüst eines Programms für einen Sinus Generator.
 Hier die Beschreibung der erforderlichen Programmfunktionalität:
\end_layout

\begin_layout Itemize
In ein Feld mit 100 Elementen soll eine volle Periode der Sinusfunktion
 abgelegt werden Die Sinusfunktion soll eine Amplitude von 1V und einen
 Gleichspannungsanteil von 1,5V besitzen 
\end_layout

\begin_layout Itemize
Am Ausgang des DA-Wandlers liegt die Sinusfunktion innerhalb des Spannungsbereic
hes von 0...3V 
\end_layout

\begin_layout Itemize
Die Ausgabe der einzelnen Werte an den DA-Wandler soll innerhalb einer Timer
 ISR erfolgen 
\end_layout

\begin_layout Itemize
Ist eine Periode ausgegeben, wird der Vorgang kontinuierlich wiederholt
 
\end_layout

\begin_layout Itemize
Über die Zeitdauer der Ausgabe von 100 Werten, definiert sich die Periodendauer
 
\end_layout

\begin_layout Itemize
Wählen Sie eine Periodendauer die einer Frequenz von 100Hz entspricht
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout
void print_value(void);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define BIT_SET(a,b) ((a) |= (b))
\end_layout

\begin_layout Plain Layout
#define BIT_CLR(a,b) ((a) &= ~(b))
\end_layout

\begin_layout Plain Layout
#define BIT_TOGGLE(a,b) ((a) ^= (b))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
int sinus[100];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
//====Hauptprogramm=======================================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
main(void)
\end_layout

\begin_layout Plain Layout
	{
\end_layout

\begin_layout Plain Layout
		int i;
\end_layout

\begin_layout Plain Layout
		double step;
\end_layout

\begin_layout Plain Layout
//===Hier sollten Variablen deklariert werden ============================
\end_layout

\begin_layout Plain Layout
	//unsigned char i = 0;
\end_layout

\begin_layout Plain Layout
	//char text[60];
\end_layout

\begin_layout Plain Layout
	//int x,y;
\end_layout

\begin_layout Plain Layout
	
\end_layout

\begin_layout Plain Layout
//===Hier die notwendigen Initialisierungsschritte =======================
\end_layout

\begin_layout Plain Layout
//=(1)== Port-Initialisierung ============================================
\end_layout

\begin_layout Plain Layout
	init_Port();				// Initialisierung der Port Register
\end_layout

\begin_layout Plain Layout
		
\end_layout

\begin_layout Plain Layout
//(2)=== Clock-System-Initialisierung ====================================
\end_layout

\begin_layout Plain Layout
	//== XT2() oder Dco() als Taktquelle einstellen
\end_layout

\begin_layout Plain Layout
	//== durch Ein- oder Auskommentieren
\end_layout

\begin_layout Plain Layout
	//== DCO ist bei LPM Einsatz bevorzugt muß zyklisch kalibriert werden
\end_layout

\begin_layout Plain Layout
	//== XT2 ist quarzstabil muß nicht zyklisch kalibriert werden
\end_layout

\begin_layout Plain Layout
	//  			
\end_layout

\begin_layout Plain Layout
	//XT2 ();					// XT2 Taktquelle aktivieren mit 7.3728MHz
\end_layout

\begin_layout Plain Layout
	DCO ();					// Dco Taktquelle aktivieren mit 7.3728MHz
\end_layout

\begin_layout Plain Layout
	//						   beachte DELTA
\end_layout

\begin_layout Plain Layout
		
\end_layout

\begin_layout Plain Layout
//=(3)== Timer-Initialisierung= ==========================================
\end_layout

\begin_layout Plain Layout
	init_Timer_A();			// Init Timer für Sekundeninterrupt
\end_layout

\begin_layout Plain Layout
							// !! noch leere Funktion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
//=(4)== USART-Initialisierung ===========================================
\end_layout

\begin_layout Plain Layout
	init_UART1();			// UART-RS232 mit 115.2kBit/s initialisieren
\end_layout

\begin_layout Plain Layout
							// !! noch leere Funktion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
//=(5)== CC1100-Transceiver-Initialisierung ==============================
\end_layout

\begin_layout Plain Layout
	init_UART0_SPI();		// CC1100 SPI UART initalisieren
\end_layout

\begin_layout Plain Layout
	init_CC1100_POWERDOWN();			// CC1100 init und in RX Mode setzen
\end_layout

\begin_layout Plain Layout
							// !!!Interrupte sind ab jetzt freigegeben!!
\end_layout

\begin_layout Plain Layout
	//== Adresse und Funkkanal des Transceivers setzen
\end_layout

\begin_layout Plain Layout
	//== für die Arbeitsplaetze HWPx (x=1...10) sollten
\end_layout

\begin_layout Plain Layout
	//== ID=x und channnel=x gesetzt werden
\end_layout

\begin_layout Plain Layout
	ID = 1;							// Adresse 
\end_layout

\begin_layout Plain Layout
	setUid(ID);						// Adresse im Transceiver setzen 
\end_layout

\begin_layout Plain Layout
	channel = 1; 					// Funkkanal  
\end_layout

\begin_layout Plain Layout
	switchFreq(channel);			// Funkkanal im Transceiver setzen 
\end_layout

\begin_layout Plain Layout
	//== Soll der Transceiver genutzt werden müssen folgende zwei Zeilen  
\end_layout

\begin_layout Plain Layout
	//== auskommentiert werden: 
\end_layout

\begin_layout Plain Layout
	init_CC1100_IDLE();		// CC1100 in den IDLE Mode setzen
\end_layout

\begin_layout Plain Layout
	init_CC1100_POWERDOWN();// CC1100 in den PowerDown Mode setzen
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
//=(6)== LCD-Display-Initialisierung =====================================
\end_layout

\begin_layout Plain Layout
	dogm_reset();		// Hardware Reset des LCD Controllers
\end_layout

\begin_layout Plain Layout
	dogm_init();		// Initialisierung der LCD Controller Register
\end_layout

\begin_layout Plain Layout
	lcd_clear(WHITE);	// Grafikspeicher auf dem MSP430 löschen
\end_layout

\begin_layout Plain Layout
	//lcd_string(BLACK, 15, 25, "MSP430-GESTARTET!");	// Textausgabe
\end_layout

\begin_layout Plain Layout
	lcd_paint();		// Grafikspeicher auf das LCD Display ausgeben
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define LED_ROT (0x01)   // 0 0 1 P4.0
\end_layout

\begin_layout Plain Layout
#define LED_GELB (0x02)  // 0 1 0 P4.1
\end_layout

\begin_layout Plain Layout
#define LED_GRUEN (0x04) // 1 0 0 P4.2
\end_layout

\begin_layout Plain Layout
#define LED_ALL (LED_ROT | LED_GELB | LED_GRUEN)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define LED_ON(led) (BIT_CLR(P4OUT, led)) 
\end_layout

\begin_layout Plain Layout
#define LED_OFF(led) (BIT_SET(P4OUT, led)) 
\end_layout

\begin_layout Plain Layout
#define LED_TOGGLE(led) (BIT_TOGGLE(P4OUT, led))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define IS_LED_ON(led) (!(P4OUT & led))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define TASTE_LINKS (0x1)
\end_layout

\begin_layout Plain Layout
#define TASTE_RECHTS (0x2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define SLEEP_QUANTUM 10000
\end_layout

\begin_layout Plain Layout
#define SLEEP(n) do { 		/* sleep for n seconds */ 
\backslash

\end_layout

\begin_layout Plain Layout
	long time = n * 100000; /* wait() sleeps 10*n microseconds */ 
\backslash

\end_layout

\begin_layout Plain Layout
	while(time > SLEEP_QUANTUM) { 
\backslash

\end_layout

\begin_layout Plain Layout
		wait(SLEEP_QUANTUM); 
\backslash

\end_layout

\begin_layout Plain Layout
		time -= SLEEP_QUANTUM; 
\backslash

\end_layout

\begin_layout Plain Layout
	} 
\backslash

\end_layout

\begin_layout Plain Layout
	wait(time); 
\backslash

\end_layout

\begin_layout Plain Layout
} while(0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// Schrittlaenge
\end_layout

\begin_layout Plain Layout
step = (2*3.14159)/100;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// berechne Ausgangswerte fuer sinus
\end_layout

\begin_layout Plain Layout
for (i = 0; i < 100; i++) {
\end_layout

\begin_layout Plain Layout
	double x = sin(i*step);
\end_layout

\begin_layout Plain Layout
	x /= 2;		// Amplitude von sinus ist 2, wir moechten 1
\end_layout

\begin_layout Plain Layout
	x += 1.5;	// Gleichspannungsanteil, Verschiebung entlang der y-Achse
\end_layout

\begin_layout Plain Layout
	
\end_layout

\begin_layout Plain Layout
	sinus[i] = x * ((double)4095/(double)3);	// 3V maximale Ausgangsspannung,
 12 Bit Aufloesung => 4096 Werte
\end_layout

\begin_layout Plain Layout
}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// interrupt wird bei 0 ausgeloest
\end_layout

\begin_layout Plain Layout
TBR = 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
BIT_SET(BCSCTL2, SELS); // waehle XT2CLK als SMCLK
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// waehle SMCLK (7.4 MHz ohne divider)
\end_layout

\begin_layout Plain Layout
BIT_SET(TBCTL, TBSSEL1);
\end_layout

\begin_layout Plain Layout
BIT_CLR(TBCTL, TBSSEL0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// wahle count up mode
\end_layout

\begin_layout Plain Layout
BIT_SET(TBCTL, MC0);
\end_layout

\begin_layout Plain Layout
BIT_CLR(TBCTL, MC1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// setze anzahl fuer interrupt
\end_layout

\begin_layout Plain Layout
TBCCR0 = 740; // 7.4 MHz: takt=7_400_000 / 10000 = count to 740 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// loesche interrupt flag fuer timer
\end_layout

\begin_layout Plain Layout
BIT_CLR(TBCCTL0, CCIFG);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
LED_OFF(LED_ALL);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// erlaube interrupt
\end_layout

\begin_layout Plain Layout
BIT_SET(TBCCTL0, CCIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// 1x Referenzspannung, schnell
\end_layout

\begin_layout Plain Layout
DAC12_1CTL = DAC12IR + DAC12AMP0 + DAC12AMP1 + DAC12AMP2 + DAC12SREF_2 +
 DAC12CALON;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout
while(1){
\end_layout

\begin_layout Plain Layout
}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout
}	// Ende Main
\end_layout

\begin_layout Plain Layout
//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#pragma vector = TIMERB0_VECTOR
\end_layout

\begin_layout Plain Layout
__interrupt void TIMERB0(void)
\end_layout

\begin_layout Plain Layout
{
\end_layout

\begin_layout Plain Layout
	static int i = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
	// setze Wert fuer DA-Wandler
\end_layout

\begin_layout Plain Layout
	DAC12_1DAT = sinus[i++];
\end_layout

\begin_layout Plain Layout
	if (i > 99)
\end_layout

\begin_layout Plain Layout
		i = 0;
\end_layout

\begin_layout Plain Layout
}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
XY-Schreiber
\end_layout

\begin_layout Subsubsection
Benutzen Sie die DA-Wandlerausgänge DAC0 (P6.6 am X-Eingang des Oszi) und
 DAC1 (P6.7 am Y-Eingang des Oszi), um ein Lichtpunkt über die Bildschirmfläche
 des Oszilloscopes zu bewegen.
 Zur Steuerung der Bewegungsrichtung nutzen Sie die beiden Tasten (P1.0 und
 P1.1) oder zwei Achsen des Beschleunigungssensors (Aufgabe 8.2).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

....
\end_layout

\begin_layout Plain Layout

main(void);					//Haupprogramm
\end_layout

\begin_layout Plain Layout

void print_value(void);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define BIT_SET(a,b) ((a) |= (b))
\end_layout

\begin_layout Plain Layout

#define BIT_CLR(a,b) ((a) &= ~(b))
\end_layout

\begin_layout Plain Layout

#define BIT_TOGGLE(a,b) ((a) ^= (b))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static int x, y;
\end_layout

\begin_layout Plain Layout

void set_pixel(int x, int y);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef enum {
\end_layout

\begin_layout Plain Layout

	NORTH,
\end_layout

\begin_layout Plain Layout

	EAST,
\end_layout

\begin_layout Plain Layout

	SOUTH,
\end_layout

\begin_layout Plain Layout

	WEST
\end_layout

\begin_layout Plain Layout

} direction_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//====Hauptprogramm=======================================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

main(void)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

//===Hier sollten Variablen deklariert werden ============================
\end_layout

\begin_layout Plain Layout

	//unsigned char i = 0;
\end_layout

\begin_layout Plain Layout

	//char text[60];
\end_layout

\begin_layout Plain Layout

	//int x,y;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

//===Hier die notwendigen Initialisierungsschritte =======================
\end_layout

\begin_layout Plain Layout

//=(1)== Port-Initialisierung ============================================
\end_layout

\begin_layout Plain Layout

	init_Port();				// Initialisierung der Port Register
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

//(2)=== Clock-System-Initialisierung ====================================
\end_layout

\begin_layout Plain Layout

	//== XT2() oder Dco() als Taktquelle einstellen
\end_layout

\begin_layout Plain Layout

	//== durch Ein- oder Auskommentieren
\end_layout

\begin_layout Plain Layout

	//== DCO ist bei LPM Einsatz bevorzugt muß zyklisch kalibriert werden
\end_layout

\begin_layout Plain Layout

	//== XT2 ist quarzstabil muß nicht zyklisch kalibriert werden
\end_layout

\begin_layout Plain Layout

	//  			
\end_layout

\begin_layout Plain Layout

	//XT2 ();					// XT2 Taktquelle aktivieren mit 7.3728MHz
\end_layout

\begin_layout Plain Layout

	DCO ();					// Dco Taktquelle aktivieren mit 7.3728MHz
\end_layout

\begin_layout Plain Layout

	//						   beachte DELTA
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

//=(3)== Timer-Initialisierung= ==========================================
\end_layout

\begin_layout Plain Layout

	init_Timer_A();			// Init Timer für Sekundeninterrupt
\end_layout

\begin_layout Plain Layout

							// !! noch leere Funktion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//=(4)== USART-Initialisierung ===========================================
\end_layout

\begin_layout Plain Layout

	init_UART1();			// UART-RS232 mit 115.2kBit/s initialisieren
\end_layout

\begin_layout Plain Layout

							// !! noch leere Funktion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//=(5)== CC1100-Transceiver-Initialisierung ==============================
\end_layout

\begin_layout Plain Layout

	init_UART0_SPI();		// CC1100 SPI UART initalisieren
\end_layout

\begin_layout Plain Layout

	init_CC1100_POWERDOWN();			// CC1100 init und in RX Mode setzen
\end_layout

\begin_layout Plain Layout

							// !!!Interrupte sind ab jetzt freigegeben!!
\end_layout

\begin_layout Plain Layout

	//== Adresse und Funkkanal des Transceivers setzen
\end_layout

\begin_layout Plain Layout

	//== für die Arbeitsplaetze HWPx (x=1...10) sollten
\end_layout

\begin_layout Plain Layout

	//== ID=x und channnel=x gesetzt werden
\end_layout

\begin_layout Plain Layout

	ID = 1;							// Adresse 
\end_layout

\begin_layout Plain Layout

	setUid(ID);						// Adresse im Transceiver setzen 
\end_layout

\begin_layout Plain Layout

	channel = 1; 					// Funkkanal  
\end_layout

\begin_layout Plain Layout

	switchFreq(channel);			// Funkkanal im Transceiver setzen 
\end_layout

\begin_layout Plain Layout

	//== Soll der Transceiver genutzt werden müssen folgende zwei Zeilen  
\end_layout

\begin_layout Plain Layout

	//== auskommentiert werden: 
\end_layout

\begin_layout Plain Layout

	init_CC1100_IDLE();		// CC1100 in den IDLE Mode setzen
\end_layout

\begin_layout Plain Layout

	init_CC1100_POWERDOWN();// CC1100 in den PowerDown Mode setzen
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//=(6)== LCD-Display-Initialisierung =====================================
\end_layout

\begin_layout Plain Layout

	dogm_reset();		// Hardware Reset des LCD Controllers
\end_layout

\begin_layout Plain Layout

	dogm_init();		// Initialisierung der LCD Controller Register
\end_layout

\begin_layout Plain Layout

	lcd_clear(WHITE);	// Grafikspeicher auf dem MSP430 löschen
\end_layout

\begin_layout Plain Layout

	//lcd_string(BLACK, 15, 25, "MSP430-GESTARTET!");	// Textausgabe
\end_layout

\begin_layout Plain Layout

	lcd_paint();		// Grafikspeicher auf das LCD Display ausgeben
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LED_ROT (0x01)   // 0 0 1 P4.0
\end_layout

\begin_layout Plain Layout

#define LED_GELB (0x02)  // 0 1 0 P4.1
\end_layout

\begin_layout Plain Layout

#define LED_GRUEN (0x04) // 1 0 0 P4.2
\end_layout

\begin_layout Plain Layout

#define LED_ALL (LED_ROT | LED_GELB | LED_GRUEN)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LED_ON(led) (BIT_CLR(P4OUT, led)) 
\end_layout

\begin_layout Plain Layout

#define LED_OFF(led) (BIT_SET(P4OUT, led)) 
\end_layout

\begin_layout Plain Layout

#define LED_TOGGLE(led) (BIT_TOGGLE(P4OUT, led))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define IS_LED_ON(led) (!(P4OUT & led))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define TASTE_LINKS (0x1)
\end_layout

\begin_layout Plain Layout

#define TASTE_RECHTS (0x2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define SLEEP_QUANTUM 10000
\end_layout

\begin_layout Plain Layout

#define SLEEP(n) do { 		/* sleep for n seconds */ 
\backslash

\end_layout

\begin_layout Plain Layout

	long time = n * 100000; /* wait() sleeps 10*n microseconds */ 
\backslash

\end_layout

\begin_layout Plain Layout

	while(time > SLEEP_QUANTUM) { 
\backslash

\end_layout

\begin_layout Plain Layout

		wait(SLEEP_QUANTUM); 
\backslash

\end_layout

\begin_layout Plain Layout

		time -= SLEEP_QUANTUM; 
\backslash

\end_layout

\begin_layout Plain Layout

	} 
\backslash

\end_layout

\begin_layout Plain Layout

	wait(time); 
\backslash

\end_layout

\begin_layout Plain Layout

} while(0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BIT_CLR(P1IES, TASTE_LINKS | TASTE_RECHTS); // LH
\end_layout

\begin_layout Plain Layout

BIT_SET(P1IE, TASTE_LINKS | TASTE_RECHTS);
\end_layout

\begin_layout Plain Layout

BIT_CLR(P1IFG, TASTE_LINKS | TASTE_RECHTS);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// 1x Referenzspannung, schnell
\end_layout

\begin_layout Plain Layout

DAC12_1CTL = DAC12IR + DAC12AMP0 + DAC12AMP1 + DAC12AMP2 + DAC12SREF_2 +
 DAC12CALON;
\end_layout

\begin_layout Plain Layout

// 1x Referenzspannung, schnell
\end_layout

\begin_layout Plain Layout

DAC12_0CTL = DAC12IR + DAC12AMP0 + DAC12AMP1 + DAC12AMP2 + DAC12SREF_2 +
 DAC12CALON;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// interrupt wird bei 0 ausgeloest
\end_layout

\begin_layout Plain Layout

TBR = 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BIT_SET(BCSCTL2, SELS); // waehle XT2CLK als SMCLK
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// waehle SMCLK (7.4 MHz ohne divider)
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCTL, TBSSEL1);
\end_layout

\begin_layout Plain Layout

BIT_CLR(TBCTL, TBSSEL0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// wahle count up mode
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCTL, MC0);
\end_layout

\begin_layout Plain Layout

BIT_CLR(TBCTL, MC1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// setze anzahl fuer interrupt
\end_layout

\begin_layout Plain Layout

TBCCR0 = 7400; // 7.4 MHz: takt=7_400_000 / 1000 = count to 7400
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// loesche interrupt flag fuer timer
\end_layout

\begin_layout Plain Layout

BIT_CLR(TBCCTL0, CCIFG);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// erlaube interrupt
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCCTL0, CCIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

while(1){
\end_layout

\begin_layout Plain Layout

}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}	// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static direction_t cur_dir = EAST;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = PORT1_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void PORT1(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (P1IFG & TASTE_LINKS) {
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P1IFG, TASTE_LINKS);
\end_layout

\begin_layout Plain Layout

		switch (cur_dir) {
\end_layout

\begin_layout Plain Layout

			case EAST:
\end_layout

\begin_layout Plain Layout

				cur_dir = NORTH;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case NORTH:
\end_layout

\begin_layout Plain Layout

				cur_dir = WEST;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case WEST:
\end_layout

\begin_layout Plain Layout

				cur_dir = SOUTH;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case SOUTH:
\end_layout

\begin_layout Plain Layout

				cur_dir = EAST;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if (P1IFG & TASTE_RECHTS) {
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P1IFG, TASTE_RECHTS);
\end_layout

\begin_layout Plain Layout

		switch (cur_dir) {
\end_layout

\begin_layout Plain Layout

			case EAST:
\end_layout

\begin_layout Plain Layout

				cur_dir = SOUTH;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case NORTH:
\end_layout

\begin_layout Plain Layout

				cur_dir = EAST;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case WEST:
\end_layout

\begin_layout Plain Layout

				cur_dir = NORTH;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			case SOUTH:
\end_layout

\begin_layout Plain Layout

				cur_dir = WEST;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = TIMERB0_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void TIMERB0(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (cur_dir) {
\end_layout

\begin_layout Plain Layout

		case EAST:
\end_layout

\begin_layout Plain Layout

			set_pixel(x++, y);
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case SOUTH:
\end_layout

\begin_layout Plain Layout

			set_pixel(x, y--);
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case WEST:
\end_layout

\begin_layout Plain Layout

			set_pixel(x--, y);
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case NORTH:
\end_layout

\begin_layout Plain Layout

			set_pixel(x, y++);
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	x = (x + 4096) % 4096;
\end_layout

\begin_layout Plain Layout

	y = (y + 4096) % 4096;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void set_pixel(int x, int y)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	x = (x + 4096) % 4096;
\end_layout

\begin_layout Plain Layout

	y = (y + 4096) % 4096;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	DAC12_0DAT = y;
\end_layout

\begin_layout Plain Layout

	DAC12_1DAT = x;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Realisieren Sie mit einem Programm auf dem MSB430H die auf dieser Webseite
 gezeigte Animation einer Lissajous-Figur.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

m
\lang english
ain(void)
\end_layout

\begin_layout Plain Layout
	{
\end_layout

\begin_layout Plain Layout
		float step;
\end_layout

\begin_layout Plain Layout
		int i;
\end_layout

\begin_layout Plain Layout
//===Hier sollten Variablen deklariert werden ============================
\end_layout

\begin_layout Plain Layout
	//unsigned char i = 0;
\end_layout

\begin_layout Plain Layout
	//char text[60];
\end_layout

\begin_layout Plain Layout
	//int x,y;
\end_layout

\begin_layout Plain Layout
	
\end_layout

\begin_layout Plain Layout
//===Hier die notwendigen Initialisierungsschritte =======================
\end_layout

\begin_layout Plain Layout
//=(1)== Port-Initialisierung ============================================
\end_layout

\begin_layout Plain Layout
	init_Port();				// Initialisierung der Port Register
\end_layout

\begin_layout Plain Layout
		
\end_layout

\begin_layout Plain Layout
//(2)=== Clock-System-Initialisierung ====================================
\end_layout

\begin_layout Plain Layout
	//== XT2() oder Dco() als Taktquelle einstellen
\end_layout

\begin_layout Plain Layout
	//== durch Ein- oder Auskommentieren
\end_layout

\begin_layout Plain Layout
	//== DCO ist bei LPM Einsatz bevorzugt muß zyklisch kalibriert werden
\end_layout

\begin_layout Plain Layout
	//== XT2 ist quarzstabil muß nicht zyklisch kalibriert werden
\end_layout

\begin_layout Plain Layout
	//  			
\end_layout

\begin_layout Plain Layout
	//XT2 ();					// XT2 Taktquelle aktivieren mit 7.3728MHz
\end_layout

\begin_layout Plain Layout
	DCO ();					// Dco Taktquelle aktivieren mit 7.3728MHz
\end_layout

\begin_layout Plain Layout
	//						   beachte DELTA
\end_layout

\begin_layout Plain Layout
		
\end_layout

\begin_layout Plain Layout
//=(3)== Timer-Initialisierung= ==========================================
\end_layout

\begin_layout Plain Layout
	init_Timer_A();			// Init Timer für Sekundeninterrupt
\end_layout

\begin_layout Plain Layout
							// !! noch leere Funktion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
//=(4)== USART-Initialisierung ===========================================
\end_layout

\begin_layout Plain Layout
	init_UART1();			// UART-RS232 mit 115.2kBit/s initialisieren
\end_layout

\begin_layout Plain Layout
							// !! noch leere Funktion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
//=(5)== CC1100-Transceiver-Initialisierung ==============================
\end_layout

\begin_layout Plain Layout
	init_UART0_SPI();		// CC1100 SPI UART initalisieren
\end_layout

\begin_layout Plain Layout
	init_CC1100_POWERDOWN();			// CC1100 init und in RX Mode setzen
\end_layout

\begin_layout Plain Layout
							// !!!Interrupte sind ab jetzt freigegeben!!
\end_layout

\begin_layout Plain Layout
	//== Adresse und Funkkanal des Transceivers setzen
\end_layout

\begin_layout Plain Layout
	//== für die Arbeitsplaetze HWPx (x=1...10) sollten
\end_layout

\begin_layout Plain Layout
	//== ID=x und channnel=x gesetzt werden
\end_layout

\begin_layout Plain Layout
	ID = 1;							// Adresse 
\end_layout

\begin_layout Plain Layout
	setUid(ID);						// Adresse im Transceiver setzen 
\end_layout

\begin_layout Plain Layout
	channel = 1; 					// Funkkanal  
\end_layout

\begin_layout Plain Layout
	switchFreq(channel);			// Funkkanal im Transceiver setzen 
\end_layout

\begin_layout Plain Layout
	//== Soll der Transceiver genutzt werden müssen folgende zwei Zeilen  
\end_layout

\begin_layout Plain Layout
	//== auskommentiert werden: 
\end_layout

\begin_layout Plain Layout
	init_CC1100_IDLE();		// CC1100 in den IDLE Mode setzen
\end_layout

\begin_layout Plain Layout
	init_CC1100_POWERDOWN();// CC1100 in den PowerDown Mode setzen
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
//=(6)== LCD-Display-Initialisierung =====================================
\end_layout

\begin_layout Plain Layout
	dogm_reset();		// Hardware Reset des LCD Controllers
\end_layout

\begin_layout Plain Layout
	dogm_init();		// Initialisierung der LCD Controller Register
\end_layout

\begin_layout Plain Layout
	lcd_clear(WHITE);	// Grafikspeicher auf dem MSP430 löschen
\end_layout

\begin_layout Plain Layout
	//lcd_string(BLACK, 15, 25, "MSP430-GESTARTET!");	// Textausgabe
\end_layout

\begin_layout Plain Layout
	lcd_paint();		// Grafikspeicher auf das LCD Display ausgeben
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define LED_ROT (0x01)   // 0 0 1 P4.0
\end_layout

\begin_layout Plain Layout
#define LED_GELB (0x02)  // 0 1 0 P4.1
\end_layout

\begin_layout Plain Layout
#define LED_GRUEN (0x04) // 1 0 0 P4.2
\end_layout

\begin_layout Plain Layout
#define LED_ALL (LED_ROT | LED_GELB | LED_GRUEN)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define LED_ON(led) (BIT_CLR(P4OUT, led)) 
\end_layout

\begin_layout Plain Layout
#define LED_OFF(led) (BIT_SET(P4OUT, led)) 
\end_layout

\begin_layout Plain Layout
#define LED_TOGGLE(led) (BIT_TOGGLE(P4OUT, led))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define IS_LED_ON(led) (!(P4OUT & led))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define TASTE_LINKS (0x1)
\end_layout

\begin_layout Plain Layout
#define TASTE_RECHTS (0x2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
#define SLEEP_QUANTUM 10000
\end_layout

\begin_layout Plain Layout
#define SLEEP(n) do { 		/* sleep for n seconds */ 
\backslash

\end_layout

\begin_layout Plain Layout
	long time = n * 100000; /* wait() sleeps 10*n microseconds */ 
\backslash

\end_layout

\begin_layout Plain Layout
	while(time > SLEEP_QUANTUM) { 
\backslash

\end_layout

\begin_layout Plain Layout
		wait(SLEEP_QUANTUM); 
\backslash

\end_layout

\begin_layout Plain Layout
		time -= SLEEP_QUANTUM; 
\backslash

\end_layout

\begin_layout Plain Layout
	} 
\backslash

\end_layout

\begin_layout Plain Layout
	wait(time); 
\backslash

\end_layout

\begin_layout Plain Layout
} while(0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// Schrittlaenge
\end_layout

\begin_layout Plain Layout
step = (2*3.14159)/SINUS_VALUES;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// berechne Ausgangswerte fuer sinus
\end_layout

\begin_layout Plain Layout
for (i = 0; i < SINUS_VALUES; i++) {
\end_layout

\begin_layout Plain Layout
	double x = sin(i*step);
\end_layout

\begin_layout Plain Layout
	x /= 2.0;	// Amplitude von sinus ist 2, wir moechten 1
\end_layout

\begin_layout Plain Layout
	x += 1.0;	// Gleichspannungsanteil, Verschiebung entlang der y-Achse
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
	sinus[i] = x * ((double)4095/(double)3);	// 3V maximale Ausgangsspannung,
 12 Bit Aufloesung => 4096 Werte
\end_layout

\begin_layout Plain Layout
}
\end_layout

\begin_layout Plain Layout
// 1x Referenzspannung, schnell
\end_layout

\begin_layout Plain Layout
DAC12_1CTL = DAC12IR + DAC12AMP0 + DAC12AMP1 + DAC12AMP2 + DAC12SREF_2 +
 DAC12CALON;
\end_layout

\begin_layout Plain Layout
// 1x Referenzspannung, schnell
\end_layout

\begin_layout Plain Layout
DAC12_0CTL = DAC12IR + DAC12AMP0 + DAC12AMP1 + DAC12AMP2 + DAC12SREF_2 +
 DAC12CALON;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// interrupt wird bei 0 ausgeloest
\end_layout

\begin_layout Plain Layout
TBR = 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
BIT_SET(BCSCTL2, SELS); // waehle XT2CLK als SMCLK
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// waehle SMCLK (7.4 MHz ohne divider)
\end_layout

\begin_layout Plain Layout
BIT_SET(TBCTL, TBSSEL1);
\end_layout

\begin_layout Plain Layout
BIT_CLR(TBCTL, TBSSEL0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// wahle count up mode
\end_layout

\begin_layout Plain Layout
BIT_SET(TBCTL, MC0);
\end_layout

\begin_layout Plain Layout
BIT_CLR(TBCTL, MC1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// setze anzahl fuer interrupt
\end_layout

\begin_layout Plain Layout
TBCCR0 = 1; // trieggere staendig
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// loesche interrupt flag fuer timer
\end_layout

\begin_layout Plain Layout
BIT_CLR(TBCCTL0, CCIFG);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
// erlaube interrupt
\end_layout

\begin_layout Plain Layout
//BIT_SET(TBCCTL0, CCIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout
while(1){
\end_layout

\begin_layout Plain Layout
	float x, y;
\end_layout

\begin_layout Plain Layout
	static int i = 0, offset = 0;
\end_layout

\begin_layout Plain Layout
	
\end_layout

\begin_layout Plain Layout
	x = sinus[(i*2 + offset) % SINUS_VALUES];
\end_layout

\begin_layout Plain Layout
	y = sinus[(i*3) % SINUS_VALUES];
\end_layout

\begin_layout Plain Layout
	
\end_layout

\begin_layout Plain Layout
	set_pixel(x, y);
\end_layout

\begin_layout Plain Layout
	
\end_layout

\begin_layout Plain Layout
	i++;
\end_layout

\begin_layout Plain Layout
	
\end_layout

\begin_layout Plain Layout
	if (i >= SINUS_VALUES) {
\end_layout

\begin_layout Plain Layout
		i = 0;
\end_layout

\begin_layout Plain Layout
		offset = (offset + 2) % SINUS_VALUES;
\end_layout

\begin_layout Plain Layout
	}
\end_layout

\begin_layout Plain Layout
	
\end_layout

\begin_layout Plain Layout
}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout
}	// Ende Main
\end_layout

\begin_layout Plain Layout
//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
void set_pixel(int x, int y)
\end_layout

\begin_layout Plain Layout
{
\end_layout

\begin_layout Plain Layout
	//x = (x + 4096) % 4096;
\end_layout

\begin_layout Plain Layout
	//y = (y + 4096) % 4096;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
	DAC12_0DAT = y;
\end_layout

\begin_layout Plain Layout
	DAC12_1DAT = x;
\end_layout

\begin_layout Plain Layout
}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
