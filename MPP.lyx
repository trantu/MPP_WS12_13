#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mikroprozessorpraktikum WS 12/13
\end_layout

\begin_layout Author
Carlos Martín Nieto, Simon Hohberg, Tu Tran
\end_layout

\begin_layout Section
I/O Port
\end_layout

\begin_layout Subsection
Output
\end_layout

\begin_layout Subsubsection
Erläutern Sie unter Nutzung des User's Guide die Funktionalität der vier
 Register:
\end_layout

\begin_layout Standard
Die folgenden P4* Register konfigurieren den Port 4.
\end_layout

\begin_layout Itemize
P4SEL: Bitmaske zum wählen zwischen I/O Funktion und peripherellem Modul
 für die einzelnen Portleitungen
\end_layout

\begin_layout Itemize
P4DIR: Bitmaske, diet die Richtung für die Portleitungen wählt (0
\begin_inset Formula $\Leftrightarrow$
\end_inset

input oder 1 
\begin_inset Formula $\Leftrightarrow$
\end_inset

 output)
\end_layout

\begin_layout Itemize
P4OUT: wenn eine Portleitung als Ausgang konfiguriert wurde, wird über dieses
 Register der Ausgangswert für die Portleitung gesetzt (0 
\begin_inset Formula $\Leftrightarrow$
\end_inset

low oder 1 
\begin_inset Formula $\Leftrightarrow$
\end_inset

high)
\end_layout

\begin_layout Itemize
P4IN: wenn eine Portleitung als Eingang konfiguriert wurde, enthält diese
 Register den Eingangswert (0 
\begin_inset Formula $\Leftrightarrow$
\end_inset

low oder 1 
\begin_inset Formula $\Leftrightarrow$
\end_inset

high)
\end_layout

\begin_layout Subsubsection
Stellen Sie eine Liste der Operatoren zur Bitmanipulation auf.
 Erklären Sie die Möglichkeiten zum Setzen, Rücksetzen und Toggeln einzelner
 bzw.
 mehrerer Portleitungen eines Ports am Beispiel von P4OUT.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#define BIT_SET(a,b) ((a) |= (b))
\end_layout

\begin_layout Plain Layout

#define BIT_CLR(a,b) ((a) &= ~(b))
\end_layout

\begin_layout Plain Layout

#define BIT_TOGGLE(a,b) ((a) ^= (b))
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
a
\family default
 ist das Bitfeld und 
\family typewriter
b
\family default
 welches bit (oder welche Bits) wir ändern wollen.
 Für P4OUT wäre a=P4OUT und b welcher Pin.
 Wen man P4.X ändern will, gibt man den Wert 
\begin_inset Formula $2^{X}$
\end_inset

 was das Bit an der X-ten Stelle setzt.
 Zum setzen, verwenden wir ein bitwise-OR der Werte, so dass das Bit, das
 b repräsentiert, gesetzt wird (alle andere Bits bleiben gleich).
 Zum Rücksetzen negieren wir den Wert, so dass alle außer das X-te Bit Null
 gesetzt werde.
 Das bitwise-AND sorgt dafür, dass alle Bits außer das X-te, die vorher
 gesetzt waren, so bleiben.
 Zum Toggeln benutzen wir eine XOR-Operation.
 An der Stelle an der eine 0 steht, bleibt also der Wert konstant, wo eine
 1 ist, wird das Bit geändert.
\end_layout

\begin_layout Subsubsection
Erläutern Sie anhand der Abbildung der inneren Struktur einer Portleitung
 für die folgenden Registerbelegungen den Signalpfad und den Logikpegel
 der Portleitung P4.0.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename MPP_114.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Signalpfad-für-P4.0"

\end_inset

Signalpfad für P4.0
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
P4SEL(
\begin_inset Formula $=0x00$
\end_inset

) setzt alle Portleitungen P4.x des Ports auf I/O.
 P4DIR(
\begin_inset Formula $=0x0F=(0000\,1111)_{2}$
\end_inset

) setzt die Portleitugnen P4.0 bis P4.3 auf Output und die Portleitungen P4.4
 bis P4.7 auf Eingang.
 Die Veroderung des Registers P4OUT mit 
\begin_inset Formula $0x01$
\end_inset

 (LED_ROT) setzt den Logikpegel der Portleitung P4.0, der als Ausgang konfigurier
t ist, auf 1.
\end_layout

\begin_layout Subsubsection
Warum leuchtet eine LED am Port P4.0, wenn der Logikpegel "0" ist und nicht
 bei dem Logikpegel "1"?
\end_layout

\begin_layout Standard
Die Portleitungen sind am negativen Kontakt der LEDs angeschlossen.
 Wenn der Pegel auf high ist, gibt es kein Potenzialdifferenz, so dass kein
 Strom fließt und dadurch die LED auch nicht leuchtet.
 Ist der Pegel low, dann entsteht eine Potenzialdifferenz, die einen Stromfluss
 ermöglicht, der die LED leuchten lässt.
\end_layout

\begin_layout Subsubsection
Erläutern Sie inhaltlich die Bedeutung und Funktionalität der folgenden
 Codezeilen:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#define LEDRT (0x01) // LEDRT wird definiert, als 0te-Bit an (hier für P4.0
 benutzt)
\end_layout

\begin_layout Plain Layout

unsigned char a; 
\end_layout

\begin_layout Plain Layout

...
 
\end_layout

\begin_layout Plain Layout

P4DIR = 0x00; // alle pins werden als input gesetzt
\end_layout

\begin_layout Plain Layout

a = 10; // a binär 1 0 1 0
\end_layout

\begin_layout Plain Layout

P4OUT = a; // P4.0 und P4.2 werden auf low gesetzt, P4.1 und P4.3 auf high
\end_layout

\begin_layout Plain Layout

P4OUT = 0x01; // P4.0 wird auf high gesetzt
\end_layout

\begin_layout Plain Layout

P4DIR = 0x07; // P4.0 bis P4.6 werden als Ausgänge gewählt
\end_layout

\begin_layout Plain Layout

P4OUT = 0x00; // alle pins werden auf low gesetzt => alle drei LEDs leuchten
\end_layout

\begin_layout Plain Layout

P4OUT |= 0x01; // P4.0 wird auf high gesetzt => die rote LED wird ausgeschaltet
\end_layout

\begin_layout Plain Layout

P4OUT |= LEDRT; // P4.0 wird wieder high gesetzt => die rote LED bleibt ausgescha
ltet
\end_layout

\begin_layout Plain Layout

P4OUT ^= ~LEDRT; // P4.0 wird auf low gesetzt, P4.1 bis P4.3 auf high => die
 rote LED wird wieder eingeschaltet, die anderen LED ausgeschaltet
\end_layout

\begin_layout Plain Layout

P4OUT ^= LEDRT; // P4.0 auf high, P4.0 bis P4.3 sind high => die rote LED wird
 ausgeschaltet
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Schreiben Sie ein kleines Programm, welches den Durchlauf einer Sequenz
 eines Ampelsignals mit den Phasen (Rot, Rot-Gelb, Grün, Gelb, Rot) simuliert.
 Nutzen Sie dazu die bereitgestellte Funktion wait() für eine Zeitschleife.
 Benutzen Sie eigene Macros und Operatoren zur Bitmanipulation.
 Beachten Sie dabei bitte, daß nur auf Basis von Bitmanipulationen die Leitungen
 P4.0 bis P4.2 verändert werden.
 Alle anderen Leitung müssen, was die Richtung und den Zustand anbelangt
 unverändert bleiben.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#define BIT_SET(a,b) ((a) |= (b))
\end_layout

\begin_layout Plain Layout

#define BIT_CLR(a,b) ((a) &= ~(b))
\end_layout

\begin_layout Plain Layout

#define BIT_TOGGLE(a,b) ((a) ^= (b))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LED_ROT (0x01)   // 0 0 1
\end_layout

\begin_layout Plain Layout

#define LED_GELB (0x02)  // 0 1 0
\end_layout

\begin_layout Plain Layout

#define LED_GRUEN (0x04) // 1 0 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// LEDs werden an, wenn das Bit nicht gesetzt ist, dies verbessert die Lesbarkei
t
\end_layout

\begin_layout Plain Layout

#define LED_ON(led) (BIT_CLR(P4OUT, led))
\end_layout

\begin_layout Plain Layout

#define LED_OFF(led) (BIT_SET(P4OUT, led))
\end_layout

\begin_layout Plain Layout

#define LED_TOGGLE(led) (BIT_TOGGLE(P4OUT, led))
\end_layout

\begin_layout Plain Layout

#define SLEEP() (wait(65000))
\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

while(1){
\end_layout

\begin_layout Plain Layout

		// Fange von bekanntem Zustand an
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GELB | LED_GRUEN | LED_ROT);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_ROT);
\end_layout

\begin_layout Plain Layout

		SLEEP();
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		SLEEP();
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GELB | LED_ROT);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		SLEEP();
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		SLEEP();
\end_layout

\begin_layout Plain Layout

}	// Ende der Endlosschleife
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Input
\end_layout

\begin_layout Subsubsection
Erläutern Sie unter Nutzung des User's Guide die Funktionalität der sieben
 Register:
\end_layout

\begin_layout Standard
Die folgenden P1* Register konfigurieren den Port 1.
\end_layout

\begin_layout Itemize
P1DIR: Bitmaske, die die Richtung für die Portleitungen wählt (0
\begin_inset Formula $\Leftrightarrow$
\end_inset

input oder 1 
\begin_inset Formula $\Leftrightarrow$
\end_inset

 output)
\end_layout

\begin_layout Itemize
P1IN: enthält die Eingabewerte der einzelnen Portleitungen (0 low, 1 high)
\end_layout

\begin_layout Itemize
P1OUT: wenn eine Portleitung als Ausgang konfiguriert wurde, wird über dieses
 Register der Ausgangswert für die Portleitung gesetzt (0 
\begin_inset Formula $\Leftrightarrow$
\end_inset

low oder 1 
\begin_inset Formula $\Leftrightarrow$
\end_inset

high)
\end_layout

\begin_layout Itemize
P1SEL: Bitmaske zum Wählen zwischen I/O Funktion und peripherellem Modul
 für die einzlenen Portleitungen.
\end_layout

\begin_layout Itemize
P1IE: Bitmaske zur Aktivierung/Deaktivierung von Interrupts für die entsprechend
e Portleitung
\end_layout

\begin_layout Itemize
P1IES: Bitmaske, die die Flanke (Änderung des Logikpegels an einer Portleitung)
 definiert, welche einen Interrupt für die entsprechende Portleitung auslöst
\end_layout

\begin_layout Itemize
P1IFG: Jedes P1IFGx Bit ist das Interrupt-Flag der jeweiligen Portleitung.
 Dieses wird gesetzt, wenn die über P1IES ausgewählte Flanke beim Eingangssignal
 der Portleitung passiert.
\end_layout

\begin_layout Subsubsection
Erläutern Sie die Funktion des Operators AND zur Bitmanipulation.
 Diskutieren Sie die Einsatzmöglichkeit folgender Schreibweisen:
\end_layout

\begin_layout Standard
Das bitwise-AND ermöglicht die logische Verknüpfung der einzelnen Bits.
 Dies erlabut auch das Überprüfen, ob einzelne Bits gesetzt sind.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

#define T_links (0x01)
\end_layout

\begin_layout Plain Layout

#define Taster (T_links)
\end_layout

\begin_layout Plain Layout

#define Taste_links (P1IN & T_links)
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

if (P1IN & Taster) {...}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

if (Taste_links) {...}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Mit 
\family typewriter
Taste_links
\family default
 ist die Bedeutung fest (liefert 1, wenn der linke Taster gedrückt ist),
 aber mit 
\family typewriter
P1IN & Taster
\family default
 kann auch ein anderer Taster geprüft werden.
 Dies ist beim Testen der Zustände der Taster sehr nützlich.
\end_layout

\begin_layout Subsubsection
Nutzen Sie die obere Schaltung zur Erklärung der nachfolgend dargestellten
 Befehls- zeilen und geben Sie an, welchen Wert die Variable a (unsigned
 char) in den einzelnen Zeilen annimmt.
 Beachten sie dabei den Tastenzustand im Kommentar.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

#define Taster_rechts (0x02)
\end_layout

\begin_layout Plain Layout

#define Taster_links (0x01)
\end_layout

\begin_layout Plain Layout

P1DIR = 0x00; // alle Pins in P1 für Input gesetzt
\end_layout

\begin_layout Plain Layout

P4DIR = 0x07; // P4.0, P4.1 und P4.2 für Output gesetzt
\end_layout

\begin_layout Plain Layout

P4OUT = 0; // Alle drei LEDs an
\end_layout

\begin_layout Plain Layout

a = 7; // Bitfolge 0000111
\end_layout

\begin_layout Plain Layout

P4OUT = a; // Alle drei LEDs aus
\end_layout

\begin_layout Plain Layout

a = P1IN & 0x00;    // beide Tasten gedrückt
\end_layout

\begin_layout Plain Layout

// a = 0
\end_layout

\begin_layout Plain Layout

a = P1IN & 0x03;    // beide Tasten gedrückt
\end_layout

\begin_layout Plain Layout

// a = 3 = b00000011
\end_layout

\begin_layout Plain Layout

a = P1IN & 0x01;    // Taste rechts gedrückt
\end_layout

\begin_layout Plain Layout

// a = 0
\end_layout

\begin_layout Plain Layout

a = P1IN & 0x01;    // Taste links  gedrückt
\end_layout

\begin_layout Plain Layout

// a = 1
\end_layout

\begin_layout Plain Layout

a = P1IN & 0x02;    // Taste rechts gedrückt
\end_layout

\begin_layout Plain Layout

// a = 2 = b00000010
\end_layout

\begin_layout Plain Layout

a = P1IN & 0x02;    // Taste links  gedrückt
\end_layout

\begin_layout Plain Layout

// a = 0
\end_layout

\begin_layout Plain Layout

P4OUT = P1IN & Taster_rechts;   // Taster rechts nicht gedrückt
\end_layout

\begin_layout Plain Layout

// P4OUT = 0, alle LEDs an
\end_layout

\begin_layout Plain Layout

P4OUT = P1IN & Taster_rechts;   // Taster rechts gedrückt
\end_layout

\begin_layout Plain Layout

// P4OUT = 0x02 = b010, gelbe LED aus, andere an
\end_layout

\begin_layout Plain Layout

P4OUT = P1IN & Taster_links;    // Taster links nicht gedrückt
\end_layout

\begin_layout Plain Layout

// P4OUT = 0, alle LEDs an
\end_layout

\begin_layout Plain Layout

P4OUT = P1IN & Taster_links;    // Taster links gedrückt
\end_layout

\begin_layout Plain Layout

// P4OUT = 0x1 = b01, rote LED aus, andere an
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Schreiben Sie ein Programm mit folgender Funktionalität:
\end_layout

\begin_layout Itemize
gelbe LED (P4.1) an, wenn keine Taste gedrückt ist
\end_layout

\begin_layout Itemize
grüne LED (P4.2) an, wenn rechte Taste gedrückt und linke Taste nicht gedrückt
 ist
\end_layout

\begin_layout Itemize
rote LED (P4.0) an, wenn linke Taste gedrückt und rechte Taste nicht gedrückt
 ist
\end_layout

\begin_layout Itemize
gelbe LED (P4.1) an, wenn beide Tasten gedrückt sind
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#define TASTE_RECHTS (0x02) // 1 0
\end_layout

\begin_layout Plain Layout

#define TASTE_LINKS (0x01)  // 0 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Diese Werte haben den Index des Wertes von P1IN & (TASTE_LINKS | TASTE_RECHTS
) */
\end_layout

\begin_layout Plain Layout

static unsigned char led_settings[] = {
\end_layout

\begin_layout Plain Layout

	5, // Wert 0 (keine Taste gedrueckt): 1 0 1 => nur gelbe LED an
\end_layout

\begin_layout Plain Layout

	6, // Wert 1 (linke Taste gedrueckt): 1 1 0 => nur rote LED an
\end_layout

\begin_layout Plain Layout

	3, // Wert 2 (rechte Taste gedrueckt): 0 1 1 => nur gruen LED an
\end_layout

\begin_layout Plain Layout

	5, // Wert 3 (linke & rechte Taste gedrueckt): 1 0 1 => nur gelbe LED an
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// alle Portleitungen auf Eingang
\end_layout

\begin_layout Plain Layout

P1DIR = 0x00;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

	while(1){
\end_layout

\begin_layout Plain Layout

		P4OUT = led_settings[P1IN & (TASTE_LINKS | TASTE_RECHTS)];
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ampelsteuerung
\end_layout

\begin_layout Subsubsection
Nutzen Sie alle drei LED und den linken Taster (P1.0), um eine Fußgängerampel
 (aus der Sichtweise des Autofahrers) zu programmieren.
 Folgender Ablauf soll dabei realisiert werden:
\end_layout

\begin_layout Itemize
Grundzustand alle LED aus
\end_layout

\begin_layout Itemize
Wenn Taste gedrückt wird, sofort gelbe LED (P4.1) einschalten
\end_layout

\begin_layout Itemize
Danach zeitverzögert gelbe LED aus und rote LED (P4.0) an
\end_layout

\begin_layout Itemize
Nach einer Pause gelbe LED (P4.1) zur roten LED (P4.0) dazuschalten
\end_layout

\begin_layout Itemize
Dann zeitverzögert nur die grüne LED (P4.2) einschalten
\end_layout

\begin_layout Itemize
Nach einer weiteren Pause alle LEDs ausschalten
\end_layout

\begin_layout Itemize
Erst danach mit einer größeren Wartezeit die Taste wieder abfragen
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#define SLEEP_QUANTUM 10000
\end_layout

\begin_layout Plain Layout

#define SLEEP(n) do { /* SLEEP n Sekunden */ 
\backslash

\end_layout

\begin_layout Plain Layout

	long time = n * 100000; /* wait() sleeps 10*n microseconds */ 
\backslash

\end_layout

\begin_layout Plain Layout

	while(time > SLEEP_QUANTUM) { 
\backslash

\end_layout

\begin_layout Plain Layout

		wait(SLEEP_QUANTUM); 
\backslash

\end_layout

\begin_layout Plain Layout

		time -= SLEEP_QUANTUM; 
\backslash

\end_layout

\begin_layout Plain Layout

	} 
\backslash

\end_layout

\begin_layout Plain Layout

	wait(time); 
\backslash

\end_layout

\begin_layout Plain Layout

} while(0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

LED_OFF(LED_ROT | LED_GELB | LED_GRUEN);
\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

	while(1){
\end_layout

\begin_layout Plain Layout

		while (!(P1IN & TASTE_LINKS)) {
\end_layout

\begin_layout Plain Layout

			; // Cycles verschwenden FTW
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		// Wenn die Taste gedrueckt wird
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		SLEEP(1);
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GELB);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_ROT);
\end_layout

\begin_layout Plain Layout

		SLEEP(2);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		SLEEP(3);
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_ROT | LED_GELB);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		SLEEP(4);
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		SLEEP(5);
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tastenstatus Abfrage
\end_layout

\begin_layout Subsubsection
Entwickeln Sie ein Programm das die Tastenbetätigungen auswertet und folgender
 Funktionsbeschreibung entspricht:
\end_layout

\begin_layout Itemize
Eine unsigned char Variable soll als Basis für diese Aufgabe genutzt werden
\end_layout

\begin_layout Itemize
Jede Tastenbetätigung der rechten Taste (P1.1), soll diese Variabel um eins
 inkrementieren
\end_layout

\begin_layout Itemize
Jede Betätigung der linken Taste (P1.0), soll diese Variable um eins dekrementier
en
\end_layout

\begin_layout Itemize
Der Zahlenwert der Variablen soll als Dezimal- und Hexadezimalzahl auf dem
 LCD-Display dargestellt werden.
\end_layout

\begin_layout Itemize
Werden beide Tasten gleichzeitig gedrückt, wird die Variable auf Null gesetz
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

unsigned char wert = 0;
\end_layout

\begin_layout Plain Layout

char string[256];
\end_layout

\begin_layout Plain Layout

int update = 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

	while(1){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// merke welche Taste(n) gedrueckt wurden
\end_layout

\begin_layout Plain Layout

		int waitfor = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		switch(P1IN) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			// beide Tasten gedrueckt
\end_layout

\begin_layout Plain Layout

			case TASTE_LINKS | TASTE_RECHTS:
\end_layout

\begin_layout Plain Layout

				waitfor = TASTE_LINKS | TASTE_RECHTS;
\end_layout

\begin_layout Plain Layout

				wert = 0;
\end_layout

\begin_layout Plain Layout

				update = 1;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			// linke Taste gedrueckt
\end_layout

\begin_layout Plain Layout

			case TASTE_LINKS:
\end_layout

\begin_layout Plain Layout

				waitfor = TASTE_LINKS;
\end_layout

\begin_layout Plain Layout

				wert--;
\end_layout

\begin_layout Plain Layout

				update = 1;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			// rechte Taste gedrueckt
\end_layout

\begin_layout Plain Layout

			case TASTE_RECHTS:
\end_layout

\begin_layout Plain Layout

				waitfor = TASTE_RECHTS;
\end_layout

\begin_layout Plain Layout

				wert++;
\end_layout

\begin_layout Plain Layout

				update = 1;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		if (!update) // Zeichnen ist teuer
\end_layout

\begin_layout Plain Layout

			continue;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// Ausgabe auf dem Display
\end_layout

\begin_layout Plain Layout

		sprintf(string, "DEC %03d
\backslash
nHEX %03x", wert, wert);
\end_layout

\begin_layout Plain Layout

		lcd_clear(WHITE);	// Grafikspeicher auf dem MSP430 löschen
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 15, 25, string);	// Textausgabe 
\end_layout

\begin_layout Plain Layout

		lcd_paint(); // Grafikspeicher auf das LCD Display ausgeben
\end_layout

\begin_layout Plain Layout

		update = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// Warten, bis die Taste losgelassen wurde
\end_layout

\begin_layout Plain Layout

		if (waitfor) {
\end_layout

\begin_layout Plain Layout

			while (P1IN & waitfor) {
\end_layout

\begin_layout Plain Layout

				;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Touchscreen als Taste
\end_layout

\begin_layout Subsubsection
Stellen Sie die Anzahl der Touchscreen (TS) Berührungen auf dem LCD-Display
 dar.
 Aktualisieren Sie diese bei jeder Touchscreen Berührung.
 Realisieren Sie dazu folgende Funktionalität:
\end_layout

\begin_layout Itemize
solange linke Taste gedrückt → LED (P4.2) an,
\end_layout

\begin_layout Itemize
wenn dabei dabei TS getippt → Anzahl um eins erniedrigen solange rechte
 Taste gedrückt → LED (P4.0) an,
\begin_inset Newline newline
\end_inset

wenn dabei TS getippt → Anzahl um eins erhöhen
\end_layout

\begin_layout Itemize
wenn keine Taste gedrückt → LED (P4.1) an, wenn dabei TS getippt → LED (P4.1)
 toggeln
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

print_value();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

	while(1){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		while(P1IN & TASTE_LINKS) {
\end_layout

\begin_layout Plain Layout

			LED_OFF(LED_GELB);
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

			if (!(P1IN & BIT_YM)) {
\end_layout

\begin_layout Plain Layout

				wert--;
\end_layout

\begin_layout Plain Layout

				print_value();
\end_layout

\begin_layout Plain Layout

				while(!(P1IN & BIT_YM)) {
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		while(P1IN & TASTE_RECHTS) {
\end_layout

\begin_layout Plain Layout

			LED_OFF(LED_GELB);
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_ROT);
\end_layout

\begin_layout Plain Layout

			if (!(P1IN & BIT_YM)) {
\end_layout

\begin_layout Plain Layout

				wert++;
\end_layout

\begin_layout Plain Layout

				print_value();
\end_layout

\begin_layout Plain Layout

				while(!(P1IN & BIT_YM)) {
\end_layout

\begin_layout Plain Layout

				}				 
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_ROT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		if (!(P1IN & BIT_YM)) {
\end_layout

\begin_layout Plain Layout

			LED_TOGGLE(LED_GELB);
\end_layout

\begin_layout Plain Layout

			while(!(P1IN & BIT_YM)) {
\end_layout

\begin_layout Plain Layout

			} 
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}		// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_value(void) {
\end_layout

\begin_layout Plain Layout

		char string[256];
\end_layout

\begin_layout Plain Layout

		sprintf(string, "DEC %03d
\backslash
nHEX %03x", wert, wert);
\end_layout

\begin_layout Plain Layout

		lcd_clear(WHITE);	// Grafikspeicher auf dem MSP430 löschen
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 15, 25, string);	// Textausgabe
\end_layout

\begin_layout Plain Layout

		lcd_paint();		// Grafikspeicher auf das LCD Display ausgeben
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
