#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mikroprozessorpraktikum WS 12/13
\end_layout

\begin_layout Author
Carlos Martín Nieto, Simon Hohberg, Tu Tran
\end_layout

\begin_layout Section
I/O Port
\end_layout

\begin_layout Subsection
Output
\end_layout

\begin_layout Subsubsection
Erläutern Sie unter Nutzung des User's Guide die Funktionalität der vier
 Register:
\end_layout

\begin_layout Itemize
P4SEL: wird zwischen I/O Funktion und peripherellem Modul
\end_layout

\begin_layout Itemize
P4DIR: wählt die Richtung für den Pin (0
\begin_inset Formula $\iff$
\end_inset

input oder 1 
\begin_inset Formula $\iff$
\end_inset

 output)
\end_layout

\begin_layout Itemize
P4OUT: setzt den Wert für den Output (0 
\begin_inset Formula $\iff$
\end_inset

low oder 1 
\begin_inset Formula $\iff$
\end_inset

high)
\end_layout

\begin_layout Itemize
P4IN: speichert den Wert für den Intput (0 
\begin_inset Formula $\iff$
\end_inset

low oder 1 
\begin_inset Formula $\iff$
\end_inset

high)
\end_layout

\begin_layout Subsubsection
Stellen Sie eine Liste der Operatoren zur Bitmanipulation auf.
 Erklären Sie die Möglichkeiten zum Setzen, Rücksetzen und Toggeln einzelner
 bzw.
 mehrerer Portleitungen eines Ports am Beispiel von P4OUT.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define BIT_SET(a,b) ((a) |= (b))
\end_layout

\begin_layout Plain Layout

#define BIT_CLR(a,b) ((a) &= ~(b))
\end_layout

\begin_layout Plain Layout

#define BIT_TOGGLE(a,b) ((a) ^= (b))
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
a
\family default
 ist das Bitfeld und 
\family typewriter
b
\family default
 welches bit (oder welche Bits) wir ändern wollen.
 Für P4OUT wäre a=P4OUT und b welcher Pin.
 Wen man P4.X ändern will, gibt man den Wert 
\begin_inset Formula $2^{X}$
\end_inset

 was den Bit an der X-te Stelle setzt.
 Zum setzen, machen wir ein bitwise-OR der Werte, so dass der Bit, was b
 repräsentiert, gesetzt wird (und alle andere Werte bleiben gleich).
 Zum Rücksetzen negieren wir den Wert, so dass alle außer das X-te Bit Null
 sind.
 Das bitwise-AND sorgt dafür, dass alle Bits außer das X-te, die vorher
 gesetzt waren, so bleiben.Zum Toggeln benutzen wir eine XOR-Operation.
 Wo das Bit 0 ist, bleibt der Wert konstant, wo es 1 ist, wird's geändert.
\end_layout

\begin_layout Subsubsection
Erläutern Sie anhand der Abbildung der inneren Struktur einer Portleitung
 für die folgenden Registerbelegungen den Signalpfad und den Logikpegel
 der Portleitung P4.0.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename MPP_114.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Signalpfad-für-P4.0"

\end_inset

Signalpfad für P4.0
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Warum leuchtet eine LED am Port P4.0, wenn der Logikpegel "0" ist und nicht
 bei dem Logikpegel "1"?
\end_layout

\begin_layout Standard
Die Pegeln sind am positivem Pegel des LEDs angeschlossen.
 Wenn der Pegel auf high ist, gibt es kein Potenzialdifferenz, also leuchtet
 die LED nicht.
 Ist der Pegel low, dann darf der Strom fließen.
\end_layout

\begin_layout Subsubsection
Erläutern Sie inhaltlich die Bedeutung und Funktionalität der folgenden
 Codezeilen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define LEDRT (0x01) // LEDRT wird definiert, als 0te-Bit an (hier für P4.0
 benutzt)
\end_layout

\begin_layout Plain Layout

unsigned char a; 
\end_layout

\begin_layout Plain Layout

...
 
\end_layout

\begin_layout Plain Layout

P4DIR = 0x00; // alle pins werden als input gesetzt
\end_layout

\begin_layout Plain Layout

a = 10; // a binär 1 0 1 0
\end_layout

\begin_layout Plain Layout

P4OUT = a; // P4.0 und P4.2 werden auf low gesetzt, P4.1 und P4.3 auf high
\end_layout

\begin_layout Plain Layout

P4OUT = 0x01; // P4.0 wird auf high gesetzt
\end_layout

\begin_layout Plain Layout

P4DIR = 0x07; // P4.0 bis P4.6 werden als Ausgänge gewählt
\end_layout

\begin_layout Plain Layout

P4OUT = 0x00; // alle pins werden auf low gesetzt
\end_layout

\begin_layout Plain Layout

P4OUT |= 0x01; // P4.0 wird auf high gesetzt
\end_layout

\begin_layout Plain Layout

P4OUT |= LEDRT; // P4.0 wird wieder high gesetzt
\end_layout

\begin_layout Plain Layout

P4OUT ^= ~LEDRT; // P4.0 wird auf low gsetzt, P4.1 bis P4.3 auf high
\end_layout

\begin_layout Plain Layout

P4OUT ^= LEDRT; // P4.0 auf high, P4.0 bis P4.3 sind high
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Schreiben Sie ein kleines Programm, welches den Durchlauf einer Sequenz
 eines Ampelsignals mit den Phasen (Rot, Rot-Gelb, Grün, Gelb, Rot) simuliert.
 Nutzen Sie dazu die bereitgestellte Funktion wait() für eine Zeitschleife.
 Benutzen Sie eigene Macros und Operatoren zur Bitmanipulation.
 Beachten Sie dabei bitte, daß nur auf Basis von Bitmanipulationen die Leitungen
 P4.0 bis P4.2 verändert werden.
 Alle anderen Leitung müssen was die Richtung und den Zustand anbelangt
 unverändert bleiben.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define BIT_SET(a,b) ((a) |= (b))
\end_layout

\begin_layout Plain Layout

#define BIT_CLR(a,b) ((a) &= ~(b))
\end_layout

\begin_layout Plain Layout

#define BIT_TOGGLE(a,b) ((a) ^= (b))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LED_ROT (0x01)   // 0 0 1
\end_layout

\begin_layout Plain Layout

#define LED_GELB (0x02)  // 0 1 0
\end_layout

\begin_layout Plain Layout

#define LED_GRUEN (0x04) // 1 0 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// LEDs werden an, wenn das Bit nicht gesetzt ist, dies macht es einfahcer
 zu lesen
\end_layout

\begin_layout Plain Layout

#define LED_ON(led) (BIT_CLR(P4OUT, led))
\end_layout

\begin_layout Plain Layout

#define LED_OFF(led) (BIT_SET(P4OUT, led))
\end_layout

\begin_layout Plain Layout

#define LED_TOGGLE(led) (BIT_TOGGLE(P4OUT, led))
\end_layout

\begin_layout Plain Layout

#define SLEEP() (wait(65000))
\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

while(1){
\end_layout

\begin_layout Plain Layout

		// Fange von bekannten Zustand an
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GELB | LED_GRUEN | LED_ROT);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_ROT);
\end_layout

\begin_layout Plain Layout

		SLEEP();
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		SLEEP();
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GELB | LED_ROT);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		SLEEP();
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		SLEEP();
\end_layout

\begin_layout Plain Layout

}	// Ende der Endlosschleife
\end_layout

\end_inset


\end_layout

\end_body
\end_document
