#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\rightmargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mikroprozessorpraktikum WS 12/13
\end_layout

\begin_layout Author
Carlos Martín Nieto, Simon Hohberg, Tu Tran
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{section}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Watchdog
\end_layout

\begin_layout Subsection
Programmierung
\end_layout

\begin_layout Subsubsection
Ermitteln Sie (auf Basis des Blockschaltbildes der Watchdog-Einheit) für
 den Watchdog alle möglichen Zeiten, die sich auf Basis der ACLK-Taktquelle
 (f=32768Hz) mit dem WDTCTL Register einstellen lassen.
 Fassen Sie die notwendigen Bitbelegung des WDTCL-Registers mit den dazu
 gehörigen Zeiten tabellarisch zusammen.
\end_layout

\begin_layout Standard
WDTISx Watchdog divider:
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32768
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1000 ms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8192
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
250 ms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
512
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15,265 ms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,9 ms
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
Wie verändern sich die in A 3.1.1 bestimmten Zeiten wenn man mit den DIVAx-Bits
 im BCSCTL1-Register die ACLK Vorteiler auf 1, 2, 4, und 8 setzt?
\end_layout

\begin_layout Standard
Da wird die Taktfrequenz geteilt, daraus wird das Intervall multipliziert.
\end_layout

\begin_layout Subsubsection
Entwickeln Sie eine eigenständige Endlosschleife die folgenden Ablauf von
 5 Schritten zyklisch ausführt: 
\begin_inset Newline newline
\end_inset

1.
 Schritt: alle LED (P4.0..2) aus , 1 Sekunden warten 
\begin_inset Newline newline
\end_inset

2.
 Schritt: LED (P4.0) an, 1 Sekunden warten, LED (P4.0) aus 
\begin_inset Newline newline
\end_inset

3.
 Schritt: LED (P4.1) an, 1 Sekunden warten, LED (P4.1) aus 
\begin_inset Newline newline
\end_inset

4.
 Schritt: LED (P4.2) an, 1 Sekunden warten, LED (P4.2) aus 
\begin_inset Newline newline
\end_inset

5.
 Schritt: alle LED (P4.0..2) an, 1 Sekunden warten, alle LED (P4.0..2) aus
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#define BIT_SET(a,b) ((a) |= (b)) 
\end_layout

\begin_layout Plain Layout

#define BIT_CLR(a,b) ((a) &= ~(b)) 
\end_layout

\begin_layout Plain Layout

#define BIT_TOGGLE(a,b) ((a) ^= (b))
\end_layout

\begin_layout Plain Layout

#define LED_ROT (0x01)   // 0 0 1 
\end_layout

\begin_layout Plain Layout

#define LED_GELB (0x02)  // 0 1 0 
\end_layout

\begin_layout Plain Layout

#define LED_GRUEN (0x04) // 1 0 0 
\end_layout

\begin_layout Plain Layout

#define LED_ALL (LED_ROT | LED_GELB | LED_GRUEN)
\end_layout

\begin_layout Plain Layout

#define LED_ON(led) (BIT_CLR(P4OUT, led))  
\end_layout

\begin_layout Plain Layout

#define LED_OFF(led) (BIT_SET(P4OUT, led))  
\end_layout

\begin_layout Plain Layout

#define LED_TOGGLE(led) (BIT_TOGGLE(P4OUT, led))
\end_layout

\begin_layout Plain Layout

#define TASTE_LINKS (0x1) #define TASTE_RECHTS (0x2)
\end_layout

\begin_layout Plain Layout

#define SLEEP_QUANTUM 10000 #define SLEEP(n) do { 
\backslash
 	
\end_layout

\begin_layout Plain Layout

long time = n * 100000; /* wait() sleeps 10*n microseconds */ 
\backslash

\end_layout

\begin_layout Plain Layout

				while(time > SLEEP_QUANTUM) { 
\backslash
 		
\end_layout

\begin_layout Plain Layout

				wait(SLEEP_QUANTUM); 
\backslash
 		
\end_layout

\begin_layout Plain Layout

				time -= SLEEP_QUANTUM; 
\backslash
 	
\end_layout

\begin_layout Plain Layout

										} 
\backslash

\end_layout

\begin_layout Plain Layout

				wait(time); 
\backslash
 
\end_layout

\begin_layout Plain Layout

				} while(0)
\end_layout

\begin_layout Plain Layout

print_value();
\end_layout

\begin_layout Plain Layout

// P5.4 Input 
\end_layout

\begin_layout Plain Layout

BIT_SET(P5SEL, 1 << 4);
\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
 	
\end_layout

\begin_layout Plain Layout

while(1){ 		LED_OFF(LED_ALL); 		SLEEP(1);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_ROT); 		
\end_layout

\begin_layout Plain Layout

		SLEEP(1);
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_ROT);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		SLEEP(1);
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GELB);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		SLEEP(1);
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		LED_ON(LED_ALL);
\end_layout

\begin_layout Plain Layout

		SLEEP(1); 	}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Im nächsten Schritt aktivieren Sie vor der Endlosschleife den Watchdog ohne
 weitere Einstellungen.
 Wie verhält sich das Programm jetzt? Erläutern Sie die gemachten Beobachtungen.
\end_layout

\begin_layout Standard
Beobachtung: keine LEDs gehen an, nur power On LED
\begin_inset Newline newline
\end_inset

Erklärung: Watchdog hat Reset sehr schnell durchgeführt und das Timer-Intervall
 ist zu klein.
\end_layout

\begin_layout Subsubsection
Berechnen Sie für diese Einstellung die Zeit bis der Watchdog einen RESET
 auslöst.
 Wie lange dauert ein Durchlauf der Schleife mit den oben beschriebenen
 fünf Schritten? Zu welchem Zeitpunkt löst der Watchdog einen RESET aus?
 Testen das Programm und diskutieren Sie das erkennbare Verhalten.
\end_layout

\begin_layout Itemize
Berechnung: Es dauert 8 Sekunden, bis Reset auslöst (= 1/8 Hz).
\end_layout

\begin_layout Itemize
Beobachtung: Es dauert ca.
 4 Sekunden, bis Reset auslöst.
\end_layout

\begin_layout Itemize
Ein Durchlauf der Schleife dauert 5 Sekunden.
\end_layout

\begin_layout Itemize
Beim 2.
 Durchlauf des Programms wird ein Reset von Watchdog ausgelöst.
\end_layout

\begin_layout Itemize
Danach läuft das LED-Programm nicht mehr, aber die Power-LED blinkt weiter.
\end_layout

\begin_layout Subsubsection
Einen RESET durch den Watchdog innerhalb der Endlosschleife kann verhindert
 werden, wenn man innerhalb der Endlosschleife den Watchdog neu programmiert.
 Fügen Sie dazu einfach nach dem 5.Schritt eine entsprechende Codezeile ein.
 Testen und dokumentieren Sie das.
\end_layout

\begin_layout Standard
Dieser Zeilencode wird am Ende der Schleife hinzugefügt:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

WDTCTL = WDTPW + WDTCNTCL + WDTSSEL;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Verteilung
\end_layout

\begin_layout Subsubsection
Stellen Sie sich vor nach dem 3.
 Schritt aus A3.1.3 und der erfolgten Änderung aus A3.1.6 wird das Programm
 gezwungen längere Zeit eine andere Aufgabe abzuarbeiten.
 Wir simulieren das durch folgende Codezeile:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

while(P1IN&0x01){P4OUT &=~0x01; wait(30000); P4OUT |= 0x01; wait(30000);};
 
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Solange der linke Taster gedrückt ist, blinkt die rote LED wait(30000) lang,
 dann fängt alles von vorne an.
\end_layout

\begin_layout Subsubsection
Jetzt ändern Sie bitte die folgende Codezeile so, dass während der Taster
 gedrückt ist, kein RESET durch den Watchdog ausgelöst wird.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

while(P1IN&0x01){
\end_layout

\begin_layout Plain Layout

	WDTCTL = WDTPW + WDTHOLD; // Watchdog aus
\end_layout

\begin_layout Plain Layout

	P4OUT &=~0x01; 
\end_layout

\begin_layout Plain Layout

	wait(30000); 
\end_layout

\begin_layout Plain Layout

	P4OUT |= 0x01; 
\end_layout

\begin_layout Plain Layout

	wait(30000);
\end_layout

\begin_layout Plain Layout

	WDTCTL = WDTPW + WDTCNTCL + WDTSSEL; //Watchdog an
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Watchdog wird so eingestellt, dass er vor der Ausführung der Programmcodes
 ausgeschaltet und danach wieder angeschaltet wird.
 Damit wird verhindert, dass kein RESET während der Ausführung des Programms
 ausgelöst wird.
\end_layout

\begin_layout Paragraph
In realen Systemen kann es durchaus passieren, dass aufgrund von Speicherfehlern
 oder Softwareproblemen ein System sich ständig neu startet.
 Wie kann man programmtechnisch registrieren und speichern, wann und an
 welcher Programmstelle der Watchdog das System neu gestartet hat.
 Skizzieren Sie einen Lösungsansatz.
 Als Hilfestellung hier folgende Stichwörter:
\end_layout

\begin_layout Itemize
NMI-Interrupt 
\end_layout

\begin_layout Itemize
Stackpointer
\end_layout

\begin_layout Itemize
Programcounter 
\end_layout

\begin_layout Itemize
Software bzw.
 System Reset 
\end_layout

\begin_layout Itemize
Information memory
\end_layout

\begin_layout Standard
Lösung:
\begin_inset Newline newline
\end_inset

Anstatt Reset-Funktion wird die NMI-Funktion benutzt um Kontrolle behalten
 zu können.
 Dabei werden eigene Funktionen für die RSI-Interupts verwendet.
 Einer ISR stehen PC und SR zur Verfügung.
 Im Flash-Speicher gibt es einen Bereich (Information Memory 256-Byte),
 indem PC und SR Werte gespeichert werden, wenn der Interupt ausgelöst wird.
 Danach wird ein Reset von uns ausgeführt.
\end_layout

\begin_layout Subsection
Software-Reset
\end_layout

\begin_layout Subsubsection
Bei Auftreten der Codezeile
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

int main() 
\end_layout

\begin_layout Plain Layout

{ #define MCU_RESET (WDTCTL = 0) 	
\end_layout

\begin_layout Plain Layout

	BIT_SET(P1SEL, TASTE_LINKS | TASTE_RECHTS);
\end_layout

\begin_layout Plain Layout

	LED_OFF(LED_ALL);
\end_layout

\begin_layout Plain Layout

	while (1) {
\end_layout

\begin_layout Plain Layout

		// wenn eine Taste gedrückt wird
\end_layout

\begin_layout Plain Layout

		if (P1IN & (TASTE_LINKS | TASTE_RECHTS)) {
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_ALL); // alle LEDs an
\end_layout

\begin_layout Plain Layout

			wait(30000);
\end_layout

\begin_layout Plain Layout

			MCU_RESET; // ein Reset des Controllers wird durchgeführt
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\end_body
\end_document
