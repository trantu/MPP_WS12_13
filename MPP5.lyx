#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\rightmargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mikroprozessorpraktikum WS 12/13
\end_layout

\begin_layout Author
Carlos Martín Nieto, Simon Hohberg, Tu Tran
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{section}{4}
\end_layout

\end_inset


\end_layout

\begin_layout Section
LPM Mode
\end_layout

\begin_layout Subsection
LPM und Interrupt
\end_layout

\begin_layout Subsubsection
Starten Sie den Controller und überprüfen Sie messtechnisch den Stromverbrauch
 und die MCLK-Taktfrequenz (wie in A 2.1.1 und A2.2.1).
\begin_inset Newline newline
\end_inset

Fügen Sie in der while(1) Schleife der main() Funktion einen Befehl ein,
 der den Mikrocontroller in den LPM4 Mode setzt.
\begin_inset Newline newline
\end_inset

Starten Sie das Programm.
 Was bewirkt der Befehl? Wie verhalten sich die Taktfrequenz und der Stromverbra
uch?
\end_layout

\begin_layout Itemize
\paragraph_spacing onehalf
Normal:
\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stromverbrauch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taktfrequenz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6,25 mA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7,35 MHz
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
\paragraph_spacing onehalf
LPM4 Mode:
\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stromverbrauch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taktfrequenz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0,97 mA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset

Keine Takfrequenz, da alle clocks und die CPU abgeschaltet werden.
\end_layout

\begin_layout Subsubsection*
Programmieren Sie den Port1 in der Form, dass bei einem Druck auf die Taste
 (P1.0) ein Interrupt ausgelöst wird.
 Die while(1) Schleife bleibt unverändert, es befindet sich nur die LPM4
 Anweisung in der Schleife.
 Realisieren Sie in der ISR des PORT1 eine 10 Sekunden dauernde Warteschleife.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#define SLEEP_QUANTUM 10000
\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * schlaeft fuer n Sekunden
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

#define SLEEP(n) do { 
\backslash

\end_layout

\begin_layout Plain Layout

	long time = n * 100000; /* wait() sleeps 10*n microseconds */ 
\backslash

\end_layout

\begin_layout Plain Layout

	while(time > SLEEP_QUANTUM) { 
\backslash

\end_layout

\begin_layout Plain Layout

		wait(SLEEP_QUANTUM); 
\backslash

\end_layout

\begin_layout Plain Layout

		time -= SLEEP_QUANTUM; 
\backslash

\end_layout

\begin_layout Plain Layout

	} 
\backslash

\end_layout

\begin_layout Plain Layout

	wait(time); 
\backslash

\end_layout

\begin_layout Plain Layout

} while(0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// P1.0 Input
\end_layout

\begin_layout Plain Layout

BIT_CLR(P1DIR, TASTE_LINKS);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BIT_SET(P1IES, TASTE_LINKS); // HL an linker taste loest interrupt aus
\end_layout

\begin_layout Plain Layout

BIT_SET(P1IE, TASTE_LINKS);  // interrupts fuer linke taste erlauben
\end_layout

\begin_layout Plain Layout

BIT_CLR(P1IFG, TASTE_LINKS); // interrupt flag loeschen
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

LED_OFF(LED_ALL);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// takt ausgeben, zum debuggen
\end_layout

\begin_layout Plain Layout

BIT_SET(P5SEL, 1 << 4);
\end_layout

\begin_layout Plain Layout

BIT_CLR(P5DIR, 1 << 4);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

  while(1){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		LPM4;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}		// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = PORT1_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void PORT1(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (P1IFG & TASTE_LINKS) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		LPM4_EXIT;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		SLEEP(10);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		BIT_CLR(P1IFG, TASTE_LINKS);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Dokumentieren Sie die Beobachtungen (Stromverbrauch und Taktfrequenz) zum
 Zeitpunkt des Tastendruckes.
\end_layout

\begin_layout Itemize
\paragraph_spacing onehalf
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stromverbrauch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taktfrequenz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5,16 mA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7,36 MHz
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Erläutern Sie die Abläufe nach dem Starten des Programms im Detail und die
 Zustände des Mikrocontrollers.
 
\end_layout

\begin_layout Standard
Beim Starten des Programms befindet sich der Mikrocontroller im normalen
 Zustand.
 Zunächst wird die durch das Programm spezifizierte Initialisierung durchgeführt
 und danach wird schließlich die Endlosschleife ausgeführt.
 Hier wird dann der LPM4-Befehl ausgeführt, sodass der Mikrocontroller diesen
 Modus einnimmt.
 Dies beinhaltet das Abschalten aller Clocks, was dazu führt, dass das Programm
 
\begin_inset Quotes eld
\end_inset

pausiert
\begin_inset Quotes erd
\end_inset

 wird.
 Der Mikrocontroller befindet sich nun sozusagen im Schlafmodus.
\end_layout

\begin_layout Standard
Wird nun der linke Taster gedrückt, löst dies den dazugehörigen Interrupt
 aus.
 In der Interruptserviceroutine wird der Mikrocontroller dann zunächst mit
 dem Befehl LPM4_EXIT 
\begin_inset Quotes eld
\end_inset

aufgeweckt
\begin_inset Quotes erd
\end_inset

, also alle Clocks wieder aktiviert.
\end_layout

\begin_layout Standard
Nachdem die Interruptserviceroutine abgearbeitet wurde, wird die Ausführung
 der while-Schleife wieder aufgenommen.
 Schließlich wird wieder der LPM4-Befehl ausgeführt, so dass der Mikrocontroller
 wieder 
\begin_inset Quotes eld
\end_inset

schlafen gelegt
\begin_inset Quotes erd
\end_inset

 wird bis das nächste Mal der Taster gedrückt wird.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MicroController_state_LPM.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Programmzustand
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Auto Shutdown
\end_layout

\begin_layout Subsubsection
Für die Umsetzung der oben beschriebenen Verhaltensweise, werden der Watchdog
 in einer Timer Anwendung und parallel dazu zwei Interruptquellen genutzt.
 Der Taster (P1.0) soll als Bedienelement genutzt werden.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

....
\end_layout

\begin_layout Plain Layout

main(void);					//Haupprogramm
\end_layout

\begin_layout Plain Layout

void print_value(void);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// status
\end_layout

\begin_layout Plain Layout

enum {
\end_layout

\begin_layout Plain Layout

	MODE_LPM4,
\end_layout

\begin_layout Plain Layout

	MODE_ACTIVE
\end_layout

\begin_layout Plain Layout

} status;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int tick = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define BIT_SET(a,b) ((a) |= (b))
\end_layout

\begin_layout Plain Layout

#define BIT_CLR(a,b) ((a) &= ~(b))
\end_layout

\begin_layout Plain Layout

#define BIT_TOGGLE(a,b) ((a) ^= (b))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//====Hauptprogramm=======================================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

main(void)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

//===Hier sollten Variablen deklariert werden ============================
\end_layout

\begin_layout Plain Layout

	//unsigned char i = 0;
\end_layout

\begin_layout Plain Layout

	//char text[60];
\end_layout

\begin_layout Plain Layout

	//int x,y;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

//===Hier die notwendigen Initialisierungsschritte =======================
\end_layout

\begin_layout Plain Layout

//=(1)== Port-Initialisierung ============================================
\end_layout

\begin_layout Plain Layout

	init_Port();				// Initialisierung der Port Register
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

//(2)=== Clock-System-Initialisierung ====================================
\end_layout

\begin_layout Plain Layout

	//== XT2() oder Dco() als Taktquelle einstellen
\end_layout

\begin_layout Plain Layout

	//== durch Ein- oder Auskommentieren
\end_layout

\begin_layout Plain Layout

	//== DCO ist bei LPM Einsatz bevorzugt muß zyklisch kalibriert werden
\end_layout

\begin_layout Plain Layout

	//== XT2 ist quarzstabil muß nicht zyklisch kalibriert werden
\end_layout

\begin_layout Plain Layout

	//  			
\end_layout

\begin_layout Plain Layout

	//XT2 ();					// XT2 Taktquelle aktivieren mit 7.3728MHz
\end_layout

\begin_layout Plain Layout

	DCO ();					// Dco Taktquelle aktivieren mit 7.3728MHz
\end_layout

\begin_layout Plain Layout

	//						   beachte DELTA
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

//=(3)== Timer-Initialisierung= ==========================================
\end_layout

\begin_layout Plain Layout

	init_Timer_A();			// Init Timer für Sekundeninterrupt
\end_layout

\begin_layout Plain Layout

							// !! noch leere Funktion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//=(4)== USART-Initialisierung ===========================================
\end_layout

\begin_layout Plain Layout

	init_UART1();			// UART-RS232 mit 115.2kBit/s initialisieren
\end_layout

\begin_layout Plain Layout

							// !! noch leere Funktion
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//=(5)== CC1100-Transceiver-Initialisierung ==============================
\end_layout

\begin_layout Plain Layout

	init_UART0_SPI();		// CC1100 SPI UART initalisieren
\end_layout

\begin_layout Plain Layout

	init_CC1100_POWERDOWN();			// CC1100 init und in RX Mode setzen
\end_layout

\begin_layout Plain Layout

							// !!!Interrupte sind ab jetzt freigegeben!!
\end_layout

\begin_layout Plain Layout

	//== Adresse und Funkkanal des Transceivers setzen
\end_layout

\begin_layout Plain Layout

	//== für die Arbeitsplaetze HWPx (x=1...10) sollten
\end_layout

\begin_layout Plain Layout

	//== ID=x und channnel=x gesetzt werden
\end_layout

\begin_layout Plain Layout

	ID = 1;							// Adresse 
\end_layout

\begin_layout Plain Layout

	setUid(ID);						// Adresse im Transceiver setzen 
\end_layout

\begin_layout Plain Layout

	channel = 1; 					// Funkkanal  
\end_layout

\begin_layout Plain Layout

	switchFreq(channel);			// Funkkanal im Transceiver setzen 
\end_layout

\begin_layout Plain Layout

	//== Soll der Transceiver genutzt werden müssen folgende zwei Zeilen  
\end_layout

\begin_layout Plain Layout

	//== auskommentiert werden: 
\end_layout

\begin_layout Plain Layout

	init_CC1100_IDLE();		// CC1100 in den IDLE Mode setzen
\end_layout

\begin_layout Plain Layout

	init_CC1100_POWERDOWN();// CC1100 in den PowerDown Mode setzen
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//=(6)== LCD-Display-Initialisierung =====================================
\end_layout

\begin_layout Plain Layout

	dogm_reset();		// Hardware Reset des LCD Controllers
\end_layout

\begin_layout Plain Layout

	dogm_init();		// Initialisierung der LCD Controller Register
\end_layout

\begin_layout Plain Layout

	lcd_clear(WHITE);	// Grafikspeicher auf dem MSP430 löschen
\end_layout

\begin_layout Plain Layout

	//lcd_string(BLACK, 15, 25, "MSP430-GESTARTET!");	// Textausgabe
\end_layout

\begin_layout Plain Layout

	lcd_paint();		// Grafikspeicher auf das LCD Display ausgeben
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LED_ROT (0x01)   // 0 0 1 P4.0
\end_layout

\begin_layout Plain Layout

#define LED_GELB (0x02)  // 0 1 0 P4.1
\end_layout

\begin_layout Plain Layout

#define LED_GRUEN (0x04) // 1 0 0 P4.2
\end_layout

\begin_layout Plain Layout

#define LED_ALL (LED_ROT | LED_GELB | LED_GRUEN)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define LED_ON(led) (BIT_CLR(P4OUT, led)) 
\end_layout

\begin_layout Plain Layout

#define LED_OFF(led) (BIT_SET(P4OUT, led)) 
\end_layout

\begin_layout Plain Layout

#define LED_TOGGLE(led) (BIT_TOGGLE(P4OUT, led))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define IS_LED_ON(led) (!(P4OUT & led))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define TASTE_LINKS (0x1)
\end_layout

\begin_layout Plain Layout

#define TASTE_RECHTS (0x2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define SLEEP_QUANTUM 10000
\end_layout

\begin_layout Plain Layout

#define SLEEP(n) do { 		/* sleep for n seconds */ 
\backslash

\end_layout

\begin_layout Plain Layout

	long time = n * 100000; /* wait() sleeps 10*n microseconds */ 
\backslash

\end_layout

\begin_layout Plain Layout

	while(time > SLEEP_QUANTUM) { 
\backslash

\end_layout

\begin_layout Plain Layout

		wait(SLEEP_QUANTUM); 
\backslash

\end_layout

\begin_layout Plain Layout

		time -= SLEEP_QUANTUM; 
\backslash

\end_layout

\begin_layout Plain Layout

	} 
\backslash

\end_layout

\begin_layout Plain Layout

	wait(time); 
\backslash

\end_layout

\begin_layout Plain Layout

} while(0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// P1.0 Input
\end_layout

\begin_layout Plain Layout

BIT_CLR(P1DIR, TASTE_LINKS);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BIT_CLR(P1IES, TASTE_LINKS); // LH an linker taste loest interrupt aus
\end_layout

\begin_layout Plain Layout

BIT_SET(P1IE, TASTE_LINKS);  // interrupts fuer linke taste erlauben
\end_layout

\begin_layout Plain Layout

BIT_CLR(P1IFG, TASTE_LINKS); // interrupt flag loeschen
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

LED_OFF(LED_ALL);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

status = MODE_LPM4;
\end_layout

\begin_layout Plain Layout

tick = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

  while(1){
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// LPM mode
\end_layout

\begin_layout Plain Layout

		if (MODE_LPM4 == status) {
\end_layout

\begin_layout Plain Layout

			LED_OFF(LED_ALL);
\end_layout

\begin_layout Plain Layout

			// disable watchdog interrupt
\end_layout

\begin_layout Plain Layout

			BIT_CLR(IE1, WDTIE);
\end_layout

\begin_layout Plain Layout

			// stoppe watchdog
\end_layout

\begin_layout Plain Layout

			WDTCTL = WDTPW + WDTHOLD; 
\end_layout

\begin_layout Plain Layout

			LPM4;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// aktiver mode	
\end_layout

\begin_layout Plain Layout

		if (MODE_ACTIVE == status) {
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// busy waiting bis taster losgelassen wird
\end_layout

\begin_layout Plain Layout

		while (P1IN & TASTE_LINKS) {
\end_layout

\begin_layout Plain Layout

			if (tick > 2) {
\end_layout

\begin_layout Plain Layout

				status = MODE_LPM4;
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}		// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = PORT1_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void PORT1(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (P1IFG & TASTE_LINKS) {
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		tick = 0;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		if (MODE_LPM4 == status) {
\end_layout

\begin_layout Plain Layout

			// zu aktivem modus wechseln
\end_layout

\begin_layout Plain Layout

			status = MODE_ACTIVE;
\end_layout

\begin_layout Plain Layout

			LPM4_EXIT;
\end_layout

\begin_layout Plain Layout

			// watchdog programmieren
\end_layout

\begin_layout Plain Layout

			// passwort, clear counter, clock source: ACLK , interval timer mode
\end_layout

\begin_layout Plain Layout

			// implizit: timer interval 32768 -> 1s
\end_layout

\begin_layout Plain Layout

			WDTCTL = WDTPW + WDTCNTCL + WDTSSEL + WDTTMSEL;
\end_layout

\begin_layout Plain Layout

			// enable interrupt
\end_layout

\begin_layout Plain Layout

			BIT_SET(IE1, WDTIE);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P1IFG, TASTE_LINKS);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = WDT_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void WDT(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	tick++;
\end_layout

\begin_layout Plain Layout

	LED_TOGGLE(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

	// nach einer minute automatisch in schlafmodus wechseln
\end_layout

\begin_layout Plain Layout

	if (MODE_ACTIVE == status && tick > 60) {
\end_layout

\begin_layout Plain Layout

		status = MODE_LPM4;
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Wake Up
\end_layout

\begin_layout Subsubsection
Der Taster an der Portleitung (P1.0) ersetzt uns den Sensor.
 Per ISR soll ein Zustandswechsel an der Portleitung erfasst werden.
 Eine LH-Flanke setzt eine Statusvariable auf 1 und eine HL-Flanke setzt
 die Statusvariable auf 0.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

// P1.0 Input
\end_layout

\begin_layout Plain Layout

BIT_CLR(P1DIR, TASTE_LINKS);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

BIT_SET(P1IES, TASTE_LINKS); // HL an linker taste loest interrupt aus
\end_layout

\begin_layout Plain Layout

BIT_SET(P1IE, TASTE_LINKS);  // interrupts fuer linke taste erlauben
\end_layout

\begin_layout Plain Layout

BIT_CLR(P1IFG, TASTE_LINKS); // interrupt flag loeschen
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

LED_OFF(LED_ALL);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// takt ausgeben, zum debuggen
\end_layout

\begin_layout Plain Layout

BIT_SET(P5SEL, 1 << 4);
\end_layout

\begin_layout Plain Layout

BIT_CLR(P5DIR, 1 << 4);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

  while(1){
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// LPM mode
\end_layout

\begin_layout Plain Layout

		if (0 == status) {
\end_layout

\begin_layout Plain Layout

			LED_OFF(LED_ALL);
\end_layout

\begin_layout Plain Layout

			LPM4;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// aktiver mode	
\end_layout

\begin_layout Plain Layout

		if (1 == status) {
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

			// ampelsequenz
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_ROT);
\end_layout

\begin_layout Plain Layout

			SLEEP(2);
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

			SLEEP(1);
\end_layout

\begin_layout Plain Layout

			LED_OFF(LED_ROT);
\end_layout

\begin_layout Plain Layout

			LED_OFF(LED_GELB);
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

			SLEEP(2);
\end_layout

\begin_layout Plain Layout

			LED_OFF(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

			SLEEP(1);
\end_layout

\begin_layout Plain Layout

			LED_OFF(LED_GELB);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}		// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = PORT1_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void PORT1(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (P1IFG & TASTE_LINKS) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		if (P1IES & TASTE_LINKS) {
\end_layout

\begin_layout Plain Layout

			// high - low flanke aktiviert		
\end_layout

\begin_layout Plain Layout

			status = 1;	// aktiver mode
\end_layout

\begin_layout Plain Layout

			LPM4_EXIT;
\end_layout

\begin_layout Plain Layout

			// setze interrupt fuer low - high
\end_layout

\begin_layout Plain Layout

			BIT_CLR(P1IES, TASTE_LINKS);
\end_layout

\begin_layout Plain Layout

		} else {
\end_layout

\begin_layout Plain Layout

			// low - high flanke aktiviert
\end_layout

\begin_layout Plain Layout

			status = 0;	// low power mode
\end_layout

\begin_layout Plain Layout

			// setze interrupt fuer high - low
\end_layout

\begin_layout Plain Layout

			BIT_SET(P1IES, TASTE_LINKS);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P1IFG, TASTE_LINKS);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
