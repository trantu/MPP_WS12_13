#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mikroprozessorpraktikum WS 12/13
\end_layout

\begin_layout Author
Carlos Martín Nieto, Simon Hohberg, Tu Tran
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{section}{8}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Der Digital/Analog Wandler des MSP430F1612
\end_layout

\begin_layout Subsection
Sinusgenerator
\end_layout

\begin_layout Subsubsection
Entwickeln Sie das Grundgerüst eines Programms für einen Sinus Generator.
 Hier die Beschreibung der erforderlichen Programmfunktionalität:
\end_layout

\begin_layout Itemize
In ein Feld mit 100 Elementen soll eine volle Periode der Sinusfunktion
 abgelegt werden Die Sinusfunktion soll eine Amplitude von 1V und einen
 Gleichspannungsanteil von 1,5V besitzen 
\end_layout

\begin_layout Itemize
Am Ausgang des DA-Wandlers liegt die Sinusfunktion innerhalb des Spannungsbereic
hes von 0...3V 
\end_layout

\begin_layout Itemize
Die Ausgabe der einzelnen Werte an den DA-Wandler soll innerhalb einer Timer
 ISR erfolgen 
\end_layout

\begin_layout Itemize
Ist eine Periode ausgegeben, wird der Vorgang kontinuierlich wiederholt
 
\end_layout

\begin_layout Itemize
Über die Zeitdauer der Ausgabe von 100 Werten, definiert sich die Periodendauer
 
\end_layout

\begin_layout Itemize
Wählen Sie eine Periodendauer die einer Frequenz von 100Hz entspricht
\end_layout

\begin_layout Standard
sds
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

// waehle P6.7 als input
\end_layout

\begin_layout Plain Layout

P6SEL |= BIT7;
\end_layout

\begin_layout Plain Layout

// schalte wandler an, waehle "multiple sample and conversion", SHT = 0
 -> 4 cycles
\end_layout

\begin_layout Plain Layout

ADC12CTL0 = ADC12ON + MSC;
\end_layout

\begin_layout Plain Layout

// ADC12 clock, repeat single channel
\end_layout

\begin_layout Plain Layout

ADC12CTL1 = CONSEQ1 + SHP;
\end_layout

\begin_layout Plain Layout

// waehle channel 7
\end_layout

\begin_layout Plain Layout

ADC12MCTL0 = INCH_7;
\end_layout

\begin_layout Plain Layout

// loesche interrupt flag
\end_layout

\begin_layout Plain Layout

BIT_CLR(ADC12IFG, 1);
\end_layout

\begin_layout Plain Layout

// erlaube interrupt
\end_layout

\begin_layout Plain Layout

BIT_SET(ADC12IE, 1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// erlaube conversion
\end_layout

\begin_layout Plain Layout

ADC12CTL0 |= ENC;
\end_layout

\begin_layout Plain Layout

// starte conversion
\end_layout

\begin_layout Plain Layout

ADC12CTL0 |= ADC12SC;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

	while(1){
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}		// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_buf(const char *str)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	do {
\end_layout

\begin_layout Plain Layout

		U1TXBUF = *str;
\end_layout

\begin_layout Plain Layout

		/*
\end_layout

\begin_layout Plain Layout

		 * (115200 / 8)**-1 = 70us pro Zeichen
\end_layout

\begin_layout Plain Layout

		 */
\end_layout

\begin_layout Plain Layout

		wait(7);
\end_layout

\begin_layout Plain Layout

	} while(*str++);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static float volts;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = ADC12_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void ADC12(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char buffer[16];
\end_layout

\begin_layout Plain Layout

	if (ADC12IFG & 1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		volts = ADC12MEM0/4096.0f;
\end_layout

\begin_layout Plain Layout

		volts *= 3.3f; 
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_ALL);
\end_layout

\begin_layout Plain Layout

		if (volts < 1) 
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		else if (volts < 2) 
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_ROT);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "U=%.2f V", volts);
\end_layout

\begin_layout Plain Layout

		lcd_clear(WHITE);
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 15, 25, buffer);
\end_layout

\begin_layout Plain Layout

		lcd_paint();
\end_layout

\begin_layout Plain Layout

		BIT_CLR(ADC12IFG, 1);
\end_layout

\begin_layout Plain Layout

	}	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Sensor
\end_layout

\begin_layout Subsubsection
In dieser Aufgabe sollen Sie Beschleunigungswerte als analoge Größen erfassen
 und Visualisieren.
 Entwickeln Sie ein Programm das folgende Funktionalität besitzt:
\end_layout

\begin_layout Itemize
Initialisierung der Portleitungen 
\end_layout

\begin_layout Itemize
Einstellung des 1,5g Messbereiches des MMA7260A 
\end_layout

\begin_layout Itemize
Timergesteuerte AD-Wandlung der 3D-Beschleunigungswerte (ax-, ay- und az-Werte)
 im 0,5 Sekundentakt 
\end_layout

\begin_layout Itemize
Ausgabe der Werte als Zeichenkette auf die serielle Schnittstelle 
\end_layout

\begin_layout Itemize
Zeichenkettenstruktur: 
\end_layout

\begin_layout Itemize
<ax><HT><ay><HT><az><CR><LF> 
\end_layout

\begin_layout Itemize
ax, ay und az Werte als ASCII Zeichenkette im Bereich von 0...4096 
\end_layout

\begin_deeper
\begin_layout Itemize
HT - Horizontal Tab 
\end_layout

\begin_layout Itemize
CR - Carriage Return 
\end_layout

\begin_layout Itemize
LF - Line Feed 
\end_layout

\begin_layout Itemize
Zeigen Sie für alle drei Achsen auf dem LCD-Display die Ergebnisse der A/D-Wandl
ung als Zahl im Bereich von 0...4095 an.
\end_layout

\end_deeper
\begin_layout Standard
E
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

// waehle ACLK
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCTL, TBSSEL0);
\end_layout

\begin_layout Plain Layout

BIT_CLR(TBCTL, TBSSEL1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// waehle Set/Reset
\end_layout

\begin_layout Plain Layout

//BIT_SET(TBCCTL1, OUTMOD1 + OUTMOD0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// setze divider auf 8
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCTL, ID0 | ID1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// wahle count up mode
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCTL, MC0);
\end_layout

\begin_layout Plain Layout

BIT_CLR(TBCTL, MC1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// setze taktanzahl fuer eine halbe sekunde
\end_layout

\begin_layout Plain Layout

TBCCR0 = 2048; // eine sekunde: takt=32000 / divider=8
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// loesche interrupt flag fuer timer
\end_layout

\begin_layout Plain Layout

BIT_CLR(TBCCTL0, CCIFG);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TBR = 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// setze Pin 5.4, 5.5, 5.6 als output
\end_layout

\begin_layout Plain Layout

BIT_SET(P5DIR, BIT4 + BIT5 + BIT6);
\end_layout

\begin_layout Plain Layout

// Beschleunigungssensor g-Range 1.5g, Sensitivity 800mV/g
\end_layout

\begin_layout Plain Layout

BIT_CLR(P5OUT, BIT4);
\end_layout

\begin_layout Plain Layout

BIT_CLR(P5OUT, BIT5);
\end_layout

\begin_layout Plain Layout

// sleep mode off
\end_layout

\begin_layout Plain Layout

BIT_SET(P5OUT, BIT6);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// waehle P6.0, P6.1, P6.2 als input
\end_layout

\begin_layout Plain Layout

P6SEL = BIT0 + BIT1 + BIT2;
\end_layout

\begin_layout Plain Layout

// schalte wandler an, waehle "multiple sample and conversion", SHT = 0
 -> 4 cycles
\end_layout

\begin_layout Plain Layout

ADC12CTL0 = ADC12ON + MSC;
\end_layout

\begin_layout Plain Layout

// ADC12 clock, sequence of channels
\end_layout

\begin_layout Plain Layout

ADC12CTL1 = CONSEQ0 + SHP;
\end_layout

\begin_layout Plain Layout

// waehle channel A0, A1, A2
\end_layout

\begin_layout Plain Layout

ADC12MCTL0 = INCH_0;
\end_layout

\begin_layout Plain Layout

ADC12MCTL1 = INCH_1;
\end_layout

\begin_layout Plain Layout

ADC12MCTL2 = INCH_2 + EOS;
\end_layout

\begin_layout Plain Layout

// loesche interrupt flag
\end_layout

\begin_layout Plain Layout

BIT_CLR(ADC12IFG, BIT2);
\end_layout

\begin_layout Plain Layout

// erlaube interrupt
\end_layout

\begin_layout Plain Layout

BIT_SET(ADC12IE, BIT2);
\end_layout

\begin_layout Plain Layout

// erlaube timer interrupt
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCCTL0, CCIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// erlaube conversion
\end_layout

\begin_layout Plain Layout

ADC12CTL0 |= ENC;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

	while(1){
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}		// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_buf(const char *str)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	do {
\end_layout

\begin_layout Plain Layout

		U1TXBUF = *str;
\end_layout

\begin_layout Plain Layout

		/*
\end_layout

\begin_layout Plain Layout

		 * (115200 / 8)**-1 = 70us pro Zeichen
\end_layout

\begin_layout Plain Layout

		 */
\end_layout

\begin_layout Plain Layout

		wait(7);
\end_layout

\begin_layout Plain Layout

	} while(*str++);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = TIMERB0_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void TIMERB0(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	// starte conversion
\end_layout

\begin_layout Plain Layout

	ADC12CTL0 |= ADC12SC;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = ADC12_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void ADC12(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char buffer[32];
\end_layout

\begin_layout Plain Layout

	int x, y, z;
\end_layout

\begin_layout Plain Layout

	if (ADC12IFG & BIT2)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		x = ADC12MEM0;
\end_layout

\begin_layout Plain Layout

		y = ADC12MEM1;
\end_layout

\begin_layout Plain Layout

		z = ADC12MEM2;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		lcd_clear(WHITE);
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "ax=%d", x);
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 16, 16, buffer);
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "ay=%d", y);
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 16, 25, buffer);
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "az=%d", z);
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 16, 33, buffer);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "%d
\backslash
t%d
\backslash
t%d
\backslash
r
\backslash
n", x, y, z);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		print_buf(buffer);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		lcd_paint();
\end_layout

\begin_layout Plain Layout

		BIT_CLR(ADC12IFG, BIT2 + BIT1 + BIT0);
\end_layout

\begin_layout Plain Layout

	}	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
