#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mikroprozessorpraktikum WS 12/13
\end_layout

\begin_layout Author
Carlos Martín Nieto, Simon Hohberg, Tu Tran
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{section}{7}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Voltmeter
\end_layout

\begin_layout Subsection
Der Mikrocontroller als Voltmeter
\end_layout

\begin_layout Subsubsection
Entwickeln Sie ein Programm das folgende Funktionalität besitzt:
\begin_inset Newline newline
\end_inset

• Timergesteuert und im Sekundentakt soll eine A/D-Wandlung statt finden
 
\begin_inset Newline newline
\end_inset

• Der gewandelte Wert soll in dem Format "U=x,xx V" auf dem LCD-Display
 ausgegeben werden.
 
\begin_inset Newline newline
\end_inset

• Bei U<1V gelbe LED (P4.1) an 
\begin_inset Newline newline
\end_inset

• Bei 1V < U < 2V grüne LED (P4.2) an 
\begin_inset Newline newline
\end_inset

• Bei U > 2V rote LED (P4.0) an
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

// waehle P6.7 als input
\end_layout

\begin_layout Plain Layout

P6SEL |= BIT7;
\end_layout

\begin_layout Plain Layout

// schalte wandler an, waehle "multiple sample and conversion", SHT = 0
 -> 4 cycles
\end_layout

\begin_layout Plain Layout

ADC12CTL0 = ADC12ON + MSC;
\end_layout

\begin_layout Plain Layout

// ADC12 clock, repeat single channel
\end_layout

\begin_layout Plain Layout

ADC12CTL1 = CONSEQ1 + SHP;
\end_layout

\begin_layout Plain Layout

// waehle channel 7
\end_layout

\begin_layout Plain Layout

ADC12MCTL0 = INCH_7;
\end_layout

\begin_layout Plain Layout

// loesche interrupt flag
\end_layout

\begin_layout Plain Layout

BIT_CLR(ADC12IFG, 1);
\end_layout

\begin_layout Plain Layout

// erlaube interrupt
\end_layout

\begin_layout Plain Layout

BIT_SET(ADC12IE, 1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// erlaube conversion
\end_layout

\begin_layout Plain Layout

ADC12CTL0 |= ENC;
\end_layout

\begin_layout Plain Layout

// starte conversion
\end_layout

\begin_layout Plain Layout

ADC12CTL0 |= ADC12SC;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

	while(1){
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}		// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_buf(const char *str)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	do {
\end_layout

\begin_layout Plain Layout

		U1TXBUF = *str;
\end_layout

\begin_layout Plain Layout

		/*
\end_layout

\begin_layout Plain Layout

		 * (115200 / 8)**-1 = 70us pro Zeichen
\end_layout

\begin_layout Plain Layout

		 */
\end_layout

\begin_layout Plain Layout

		wait(7);
\end_layout

\begin_layout Plain Layout

	} while(*str++);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static float volts;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = ADC12_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void ADC12(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char buffer[16];
\end_layout

\begin_layout Plain Layout

	if (ADC12IFG & 1)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		volts = ADC12MEM0/4096.0f;
\end_layout

\begin_layout Plain Layout

		volts *= 3.3f; 
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		LED_OFF(LED_ALL);
\end_layout

\begin_layout Plain Layout

		if (volts < 1) 
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		else if (volts < 2) 
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_GRUEN);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		else
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			LED_ON(LED_ROT);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "U=%.2f V", volts);
\end_layout

\begin_layout Plain Layout

		lcd_clear(WHITE);
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 15, 25, buffer);
\end_layout

\begin_layout Plain Layout

		lcd_paint();
\end_layout

\begin_layout Plain Layout

		BIT_CLR(ADC12IFG, 1);
\end_layout

\begin_layout Plain Layout

	}	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Sensor
\end_layout

\begin_layout Subsubsection
In dieser Aufgabe sollen Sie Beschleunigungswerte als analoge Größen erfassen
 und Visualisieren.
 Entwickeln Sie ein Programm das folgende Funktionalität besitzt:
\end_layout

\begin_layout Itemize
Initialisierung der Portleitungen 
\end_layout

\begin_layout Itemize
Einstellung des 1,5g Messbereiches des MMA7260A 
\end_layout

\begin_layout Itemize
Timergesteuerte AD-Wandlung der 3D-Beschleunigungswerte (ax-, ay- und az-Werte)
 im 0,5 Sekundentakt 
\end_layout

\begin_layout Itemize
Ausgabe der Werte als Zeichenkette auf die serielle Schnittstelle 
\end_layout

\begin_layout Itemize
Zeichenkettenstruktur: 
\end_layout

\begin_layout Itemize
<ax><HT><ay><HT><az><CR><LF> 
\end_layout

\begin_layout Itemize
ax, ay und az Werte als ASCII Zeichenkette im Bereich von 0...4096 
\end_layout

\begin_deeper
\begin_layout Itemize
HT - Horizontal Tab 
\end_layout

\begin_layout Itemize
CR - Carriage Return 
\end_layout

\begin_layout Itemize
LF - Line Feed 
\end_layout

\begin_layout Itemize
Zeigen Sie für alle drei Achsen auf dem LCD-Display die Ergebnisse der A/D-Wandl
ung als Zahl im Bereich von 0...4095 an.
\end_layout

\end_deeper
\begin_layout Standard
E
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

// waehle ACLK
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCTL, TBSSEL0);
\end_layout

\begin_layout Plain Layout

BIT_CLR(TBCTL, TBSSEL1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// waehle Set/Reset
\end_layout

\begin_layout Plain Layout

//BIT_SET(TBCCTL1, OUTMOD1 + OUTMOD0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// setze divider auf 8
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCTL, ID0 | ID1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// wahle count up mode
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCTL, MC0);
\end_layout

\begin_layout Plain Layout

BIT_CLR(TBCTL, MC1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// setze taktanzahl fuer eine halbe sekunde
\end_layout

\begin_layout Plain Layout

TBCCR0 = 2048; // eine sekunde: takt=32000 / divider=8
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// loesche interrupt flag fuer timer
\end_layout

\begin_layout Plain Layout

BIT_CLR(TBCCTL0, CCIFG);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

TBR = 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// setze Pin 5.4, 5.5, 5.6 als output
\end_layout

\begin_layout Plain Layout

BIT_SET(P5DIR, BIT4 + BIT5 + BIT6);
\end_layout

\begin_layout Plain Layout

// Beschleunigungssensor g-Range 1.5g, Sensitivity 800mV/g
\end_layout

\begin_layout Plain Layout

BIT_CLR(P5OUT, BIT4);
\end_layout

\begin_layout Plain Layout

BIT_CLR(P5OUT, BIT5);
\end_layout

\begin_layout Plain Layout

// sleep mode off
\end_layout

\begin_layout Plain Layout

BIT_SET(P5OUT, BIT6);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// waehle P6.0, P6.1, P6.2 als input
\end_layout

\begin_layout Plain Layout

P6SEL = BIT0 + BIT1 + BIT2;
\end_layout

\begin_layout Plain Layout

// schalte wandler an, waehle "multiple sample and conversion", SHT = 0
 -> 4 cycles
\end_layout

\begin_layout Plain Layout

ADC12CTL0 = ADC12ON + MSC;
\end_layout

\begin_layout Plain Layout

// ADC12 clock, sequence of channels
\end_layout

\begin_layout Plain Layout

ADC12CTL1 = CONSEQ0 + SHP;
\end_layout

\begin_layout Plain Layout

// waehle channel A0, A1, A2
\end_layout

\begin_layout Plain Layout

ADC12MCTL0 = INCH_0;
\end_layout

\begin_layout Plain Layout

ADC12MCTL1 = INCH_1;
\end_layout

\begin_layout Plain Layout

ADC12MCTL2 = INCH_2 + EOS;
\end_layout

\begin_layout Plain Layout

// loesche interrupt flag
\end_layout

\begin_layout Plain Layout

BIT_CLR(ADC12IFG, BIT2);
\end_layout

\begin_layout Plain Layout

// erlaube interrupt
\end_layout

\begin_layout Plain Layout

BIT_SET(ADC12IE, BIT2);
\end_layout

\begin_layout Plain Layout

// erlaube timer interrupt
\end_layout

\begin_layout Plain Layout

BIT_SET(TBCCTL0, CCIE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// erlaube conversion
\end_layout

\begin_layout Plain Layout

ADC12CTL0 |= ENC;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

	while(1){
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}		// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void print_buf(const char *str)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	do {
\end_layout

\begin_layout Plain Layout

		U1TXBUF = *str;
\end_layout

\begin_layout Plain Layout

		/*
\end_layout

\begin_layout Plain Layout

		 * (115200 / 8)**-1 = 70us pro Zeichen
\end_layout

\begin_layout Plain Layout

		 */
\end_layout

\begin_layout Plain Layout

		wait(7);
\end_layout

\begin_layout Plain Layout

	} while(*str++);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = TIMERB0_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void TIMERB0(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	// starte conversion
\end_layout

\begin_layout Plain Layout

	ADC12CTL0 |= ADC12SC;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = ADC12_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void ADC12(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char buffer[32];
\end_layout

\begin_layout Plain Layout

	int x, y, z;
\end_layout

\begin_layout Plain Layout

	if (ADC12IFG & BIT2)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		x = ADC12MEM0;
\end_layout

\begin_layout Plain Layout

		y = ADC12MEM1;
\end_layout

\begin_layout Plain Layout

		z = ADC12MEM2;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		lcd_clear(WHITE);
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "ax=%d", x);
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 16, 16, buffer);
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "ay=%d", y);
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 16, 25, buffer);
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "az=%d", z);
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 16, 33, buffer);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "%d
\backslash
t%d
\backslash
t%d
\backslash
r
\backslash
n", x, y, z);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		print_buf(buffer);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		lcd_paint();
\end_layout

\begin_layout Plain Layout

		BIT_CLR(ADC12IFG, BIT2 + BIT1 + BIT0);
\end_layout

\begin_layout Plain Layout

	}	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
So werden die Beschleunigungswerte berechnet:
\begin_inset Newline newline
\end_inset

Neuer Wert 
\begin_inset Formula $=(\frac{Beschleunigungswerte}{4095}\cdot3-1.5)\cdot9.81\frac{m}{s^{2}}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Beschleunigungswerte_8_2_1.png

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Beschleunigungswerte über der Excel-Tabelle
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Touchscreen
\end_layout

\begin_layout Subsubsection
Bei Berührung des Touchscreens soll eine ISR gestartet werden.
 In der ISR sollen die Koordinaten der Touchscreenberührung auf das LCD-Display
 ausgegeben werden.
 Solange der Touchscreen berührt wird soll die Anzeige ständig aktualisiert
 werden und die LED (P4.1) leuchten.
 Die obere linke Ecke soll die Koordinaten (0,0) besitzen.
 In den Achsen sind folgende Bereiche möglich:
\begin_inset Newline newline
\end_inset

• X = 0..127
\begin_inset Newline newline
\end_inset

• Y = 0..63
\end_layout

\begin_layout Standard
Initialisierung wie oben.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,frame=single,language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void ts_reset_pins(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  // alle Leitungen auf Eingang  
\end_layout

\begin_layout Plain Layout

	TS_TIP_DIR_IN;
\end_layout

\begin_layout Plain Layout

	TS_YP_DIR_IN; TS_YM_DIR_IN;
\end_layout

\begin_layout Plain Layout

	TS_XP_DIR_IN; TS_XM_DIR_IN;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Einlesen Touch-Event
\end_layout

\begin_layout Plain Layout

void ts_listen(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ts_reset_pins();
\end_layout

\begin_layout Plain Layout

	// das Ausgangsregister vorbereitend setzen
\end_layout

\begin_layout Plain Layout

	TS_TIP_1; // YP Y-Achse wird über einen PullUp Widerstand auf 1 gezogen
\end_layout

\begin_layout Plain Layout

	TS_XM_0; // XM X-Achse wird auf 0 gesetzt
\end_layout

\begin_layout Plain Layout

	// Die Ausgaenge jetzt freigeben
\end_layout

\begin_layout Plain Layout

	TS_TIP_DIR_OUT; // YP auf 1
\end_layout

\begin_layout Plain Layout

	TS_XM_DIR_OUT;  // XM auf 0 
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	// erlaube Interrupt in P1.6 bei wechsel auf 0
\end_layout

\begin_layout Plain Layout

	BIT_SET(P1IES, BIT_YM); // HL
\end_layout

\begin_layout Plain Layout

	BIT_CLR(P1IFG, BIT_YM);
\end_layout

\begin_layout Plain Layout

	BIT_SET(P1IE, BIT_YM);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Bereite TS fuer Einlesen von X vor
\end_layout

\begin_layout Plain Layout

void ts_cfg_x(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ts_reset_pins();
\end_layout

\begin_layout Plain Layout

	// die Ausgangsregister vorbereitend setzen
\end_layout

\begin_layout Plain Layout

	TS_XP_1; // XP X-Achse rechts auf 1
\end_layout

\begin_layout Plain Layout

	TS_XM_0; // XM X-Achse links auf 0
\end_layout

\begin_layout Plain Layout

	// Die Ausgaenge freigeben
\end_layout

\begin_layout Plain Layout

	TS_XP_DIR_OUT;  // XP auf 1 freigeben
\end_layout

\begin_layout Plain Layout

	TS_XM_DIR_OUT;  // XM auf 0 freigeben
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ts_cfg_y(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ts_reset_pins();
\end_layout

\begin_layout Plain Layout

	// die Ausgangsregister vorbereitend setzen
\end_layout

\begin_layout Plain Layout

	TS_YP_1; // YP Y-Achse oben auf 1
\end_layout

\begin_layout Plain Layout

	TS_YM_0; // YM Y-Achse unten auf 0
\end_layout

\begin_layout Plain Layout

	// Die Ausgaenge freigeben
\end_layout

\begin_layout Plain Layout

	TS_YP_DIR_OUT;  // YP auf 1 freigeben
\end_layout

\begin_layout Plain Layout

	TS_YM_DIR_OUT;  // YM auf 0 freigeben
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	[...]
\end_layout

\begin_layout Plain Layout

	ts_listen();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	_bis_SR_register(GIE);
\end_layout

\begin_layout Plain Layout

//===Hier die Endlosschleife quasi das Betriebssystem=====================
\end_layout

\begin_layout Plain Layout

	while(1){
\end_layout

\begin_layout Plain Layout

	}	// Ende der Endlosschleife
\end_layout

\begin_layout Plain Layout

}		// Ende Main
\end_layout

\begin_layout Plain Layout

//====Ende des Hauptprogramms ============================================
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#pragma vector = PORT1_VECTOR
\end_layout

\begin_layout Plain Layout

__interrupt void PORT1(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	char buffer[32];
\end_layout

\begin_layout Plain Layout

	int x, y;
\end_layout

\begin_layout Plain Layout

	static const int xmin = 660;
\end_layout

\begin_layout Plain Layout

	static const int xwidth = 3475 - 660;
\end_layout

\begin_layout Plain Layout

	static const int ymin = 848;
\end_layout

\begin_layout Plain Layout

	static const int ywidth = 3343 - 848;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LED_ON(LED_GELB);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	while (P1IFG & BIT6 || !(P1IN & BIT_YM)) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// loesche touch interrupt flag und schalte interrupt aus
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P1IFG, BIT6);
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P1IE, BIT_YM);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// verbinde YP
\end_layout

\begin_layout Plain Layout

		BIT_SET(P6SEL, BIT_YP);
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P6DIR, BIT_YP);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// lade konfiguration zum Lesen von x
\end_layout

\begin_layout Plain Layout

		ts_cfg_x();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// schalte Wandler an		
\end_layout

\begin_layout Plain Layout

		ADC12CTL0 = ADC12ON;
\end_layout

\begin_layout Plain Layout

		// konfiguriere AD Wandler
\end_layout

\begin_layout Plain Layout

		ADC12CTL1 = 0;
\end_layout

\begin_layout Plain Layout

		ADC12MCTL0 = INCH_4;
\end_layout

\begin_layout Plain Layout

		// starte Wandlung
\end_layout

\begin_layout Plain Layout

		ADC12CTL0 |= ENC + ADC12SC;
\end_layout

\begin_layout Plain Layout

		// stoppe Wandlung		
\end_layout

\begin_layout Plain Layout

		BIT_CLR(ADC12CTL0, ADC12SC);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// Warte, bis die Konversion abgeschlossen ist
\end_layout

\begin_layout Plain Layout

		while(ADC12CTL1 & ADC12BUSY);
\end_layout

\begin_layout Plain Layout

		x = ADC12MEM0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// Normalisieren auf 0...(xwidth)
\end_layout

\begin_layout Plain Layout

		x -= xmin;
\end_layout

\begin_layout Plain Layout

		x = ((float)1 - (((float)(xwidth - x))/((float)(xwidth)))) * 127;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P6SEL, BIT_YP);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// lade konfiguration zum Lesen von y
\end_layout

\begin_layout Plain Layout

		ts_cfg_y();
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// verbinde XP
\end_layout

\begin_layout Plain Layout

		BIT_SET(P6SEL, BIT_XP);
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P6DIR, BIT_XP);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// schalte Wandler an		
\end_layout

\begin_layout Plain Layout

		ADC12CTL0 = ADC12ON;
\end_layout

\begin_layout Plain Layout

		// konfiguriere AD Wandler
\end_layout

\begin_layout Plain Layout

		ADC12CTL1 = 0;
\end_layout

\begin_layout Plain Layout

		ADC12MCTL0 = INCH_5;
\end_layout

\begin_layout Plain Layout

		// starte Wandlung
\end_layout

\begin_layout Plain Layout

		ADC12CTL0 |= ENC + ADC12SC;
\end_layout

\begin_layout Plain Layout

		// stoppe Wandlung		
\end_layout

\begin_layout Plain Layout

		BIT_CLR(ADC12CTL0, ADC12SC);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// Warte, bis die Konversion abgeschlossen ist
\end_layout

\begin_layout Plain Layout

		while(ADC12CTL1 & ADC12BUSY);
\end_layout

\begin_layout Plain Layout

		y = ADC12MEM0;
\end_layout

\begin_layout Plain Layout

		// Normalisieren auf 0...(ywidth)
\end_layout

\begin_layout Plain Layout

		y -= ymin;
\end_layout

\begin_layout Plain Layout

		y = (((float)(ywidth - y))/((float)ywidth)) * 63;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		// schalte Wandler aus
\end_layout

\begin_layout Plain Layout

		ADC12CTL0 = 0;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		BIT_CLR(P6SEL, BIT_XP);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		lcd_clear(WHITE);
\end_layout

\begin_layout Plain Layout

		sprintf(buffer, "x=%d y=%d", x, y);
\end_layout

\begin_layout Plain Layout

		lcd_string(BLACK, 8, 15, buffer);
\end_layout

\begin_layout Plain Layout

		lcd_paint();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		ts_listen();
\end_layout

\begin_layout Plain Layout

		BIT_SET(P1IE, BIT_YM);
\end_layout

\begin_layout Plain Layout

		BIT_CLR(ADC12IFG, 1);	
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	LED_OFF(LED_GELB);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
